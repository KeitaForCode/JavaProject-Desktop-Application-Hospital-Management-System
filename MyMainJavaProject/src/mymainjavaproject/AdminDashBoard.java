/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mymainjavaproject;

import java.sql.*;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.lang.*;

/**
 *
 * @author Leo
 */
public class AdminDashBoard extends javax.swing.JFrame {

    /**
     * Creates new form AdminDashBoard
     */
    public AdminDashBoard() {
        initComponents(); 
        setVisible(true);
        setLocationRelativeTo(null);
        setTitle("Admin Dashboard");
        setResizable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        adddoctor = new javax.swing.JButton();
        home = new javax.swing.JButton();
        addpatient = new javax.swing.JButton();
        addreceptionist = new javax.swing.JButton();
        addaccountant = new javax.swing.JButton();
        addlaboritorist = new javax.swing.JButton();
        addpharmacist = new javax.swing.JButton();
        view = new javax.swing.JButton();
        layeredPane = new javax.swing.JLayeredPane();
        homepanel = new javax.swing.JPanel();
        homeimage = new javax.swing.JLabel();
        doctorpanel = new javax.swing.JPanel();
        Doc_title = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        doc_id = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        doc_firstname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        doc_lastname = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        doc_address = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        doc_mobile = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        doc_email = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        doc_specialization = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        doc_add = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        doc_update = new javax.swing.JButton();
        doc_delete = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        doc_department = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        doc_genderM = new javax.swing.JRadioButton();
        doc_genderF = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        doc_country = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        doc_reset = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        doc_repassword = new javax.swing.JPasswordField();
        doc_password = new javax.swing.JPasswordField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButton7 = new javax.swing.JButton();
        jDateChooser8 = new com.toedter.calendar.JDateChooser();
        jDateChooser9 = new com.toedter.calendar.JDateChooser();
        fnameerror = new javax.swing.JLabel();
        lnameerror = new javax.swing.JLabel();
        addresserror = new javax.swing.JLabel();
        mobile_error = new javax.swing.JLabel();
        email_error = new javax.swing.JLabel();
        pass_error = new javax.swing.JLabel();
        repass_error = new javax.swing.JLabel();
        dept_error = new javax.swing.JLabel();
        special_error = new javax.swing.JLabel();
        id_error = new javax.swing.JLabel();
        patientpanel = new javax.swing.JPanel();
        patient_title = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        patient_id = new javax.swing.JTextField();
        patient_fullname = new javax.swing.JTextField();
        patient_address = new javax.swing.JTextField();
        patient_mobile = new javax.swing.JTextField();
        patient_disease = new javax.swing.JTextField();
        patientdoc_id = new javax.swing.JTextField();
        patientdoc_name = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        patient_add = new javax.swing.JButton();
        patient_update = new javax.swing.JButton();
        patient_delete = new javax.swing.JButton();
        patient_reset = new javax.swing.JButton();
        patientroom = new javax.swing.JLabel();
        patient_admitted = new javax.swing.JTextField();
        dateofbirth = new com.toedter.calendar.JDateChooser();
        p_iderror = new javax.swing.JLabel();
        fullname_error = new javax.swing.JLabel();
        p_addresserror = new javax.swing.JLabel();
        p_roomerror = new javax.swing.JLabel();
        p_mobileerror = new javax.swing.JLabel();
        disease_error = new javax.swing.JLabel();
        docid_error = new javax.swing.JLabel();
        p_docnameerror = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        receptionistpanel = new javax.swing.JPanel();
        recept_title = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        recept_id = new javax.swing.JTextField();
        recept_firstname = new javax.swing.JTextField();
        recept_lastname = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        recept_country = new javax.swing.JComboBox<>();
        recept_genderM = new javax.swing.JRadioButton();
        recept_genderF = new javax.swing.JRadioButton();
        recept_email = new javax.swing.JTextField();
        recept_password = new javax.swing.JPasswordField();
        recept_repassword = new javax.swing.JPasswordField();
        recept_mobile = new javax.swing.JTextField();
        recept_address = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        recept_add = new javax.swing.JButton();
        recept_update = new javax.swing.JButton();
        recept_delete = new javax.swing.JButton();
        recept_reset = new javax.swing.JButton();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        recep_iderror = new javax.swing.JLabel();
        recep_fnameerror = new javax.swing.JLabel();
        recep_lnameerror = new javax.swing.JLabel();
        recep_emailerror = new javax.swing.JLabel();
        recep_passerror = new javax.swing.JLabel();
        recep_repasserror = new javax.swing.JLabel();
        recep_mobileerror = new javax.swing.JLabel();
        recep_addresserror = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        accountantpanel = new javax.swing.JPanel();
        account_title = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        account_id = new javax.swing.JTextField();
        account_firstname = new javax.swing.JTextField();
        account_lastname = new javax.swing.JTextField();
        account_country = new javax.swing.JComboBox<>();
        account_genderM = new javax.swing.JRadioButton();
        account_genderF = new javax.swing.JRadioButton();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        account_email = new javax.swing.JTextField();
        account_mobile = new javax.swing.JTextField();
        account_address = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        account_add = new javax.swing.JButton();
        account_update = new javax.swing.JButton();
        account_delete = new javax.swing.JButton();
        account_reset = new javax.swing.JButton();
        jDateChooser4 = new com.toedter.calendar.JDateChooser();
        account_iderror = new javax.swing.JLabel();
        account_fnameerror = new javax.swing.JLabel();
        account_lnameerror = new javax.swing.JLabel();
        account_emailerror = new javax.swing.JLabel();
        account_passerror = new javax.swing.JLabel();
        account_repasserror = new javax.swing.JLabel();
        account_mobileerror = new javax.swing.JLabel();
        account_addresserror = new javax.swing.JLabel();
        account_password1 = new javax.swing.JPasswordField();
        account_repassword1 = new javax.swing.JPasswordField();
        jButton10 = new javax.swing.JButton();
        laboritoristpanel = new javax.swing.JPanel();
        lab_title = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        lab_id = new javax.swing.JTextField();
        lab_firstname = new javax.swing.JTextField();
        lab_lastname = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        lab_country = new javax.swing.JComboBox<>();
        lab_genderM = new javax.swing.JRadioButton();
        lab_genderF = new javax.swing.JRadioButton();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        lab_email = new javax.swing.JTextField();
        lab_password = new javax.swing.JPasswordField();
        lab_repassword = new javax.swing.JPasswordField();
        lab_mobile = new javax.swing.JTextField();
        lab_address = new javax.swing.JTextField();
        jSeparator10 = new javax.swing.JSeparator();
        lab_add = new javax.swing.JButton();
        lab_update = new javax.swing.JButton();
        lab_delete = new javax.swing.JButton();
        lab_reset = new javax.swing.JButton();
        jDateChooser5 = new com.toedter.calendar.JDateChooser();
        labid_error = new javax.swing.JLabel();
        labname_error = new javax.swing.JLabel();
        labname1_error = new javax.swing.JLabel();
        labemail_error = new javax.swing.JLabel();
        labpass_error = new javax.swing.JLabel();
        labrepass_error = new javax.swing.JLabel();
        labmobile_error = new javax.swing.JLabel();
        labaddress_error = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        pharmacistpanel = new javax.swing.JPanel();
        pha_title = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        jLabel69 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        pha_id = new javax.swing.JTextField();
        pha_firstname = new javax.swing.JTextField();
        pha_lastname = new javax.swing.JTextField();
        pha_country = new javax.swing.JComboBox<>();
        pha_genderM = new javax.swing.JRadioButton();
        pha_genderF = new javax.swing.JRadioButton();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        pha_email = new javax.swing.JTextField();
        pha_password = new javax.swing.JPasswordField();
        pha_repassword = new javax.swing.JPasswordField();
        pha_mobile = new javax.swing.JTextField();
        pha_address = new javax.swing.JTextField();
        jSeparator12 = new javax.swing.JSeparator();
        pha_add = new javax.swing.JButton();
        pha_update = new javax.swing.JButton();
        pha_delete = new javax.swing.JButton();
        pha_reset = new javax.swing.JButton();
        jDateChooser6 = new com.toedter.calendar.JDateChooser();
        jButton12 = new javax.swing.JButton();
        phaid_error = new javax.swing.JLabel();
        phafname_error = new javax.swing.JLabel();
        phalname_error = new javax.swing.JLabel();
        phaemail_error = new javax.swing.JLabel();
        phapassword_error = new javax.swing.JLabel();
        pharepass_error = new javax.swing.JLabel();
        phamobile_error = new javax.swing.JLabel();
        phaaddress_error = new javax.swing.JLabel();
        viewpanel = new javax.swing.JPanel();
        viewdoctors = new javax.swing.JButton();
        viewpatients = new javax.swing.JButton();
        viewrecepts = new javax.swing.JButton();
        viewaccountants = new javax.swing.JButton();
        viewlabs = new javax.swing.JButton();
        viewphar = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JSeparator();
        jLabel46 = new javax.swing.JLabel();
        patientsignoutpanel = new javax.swing.JPanel();
        jLabel57 = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        outpatient_id = new javax.swing.JTextField();
        outpatientfullname = new javax.swing.JTextField();
        outpatientaddress = new javax.swing.JTextField();
        outpatientroom = new javax.swing.JTextField();
        outpatientmobile = new javax.swing.JTextField();
        outpatientdisease = new javax.swing.JTextField();
        outpatientdocid = new javax.swing.JTextField();
        outpatientdocname = new javax.swing.JTextField();
        jSeparator15 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jDateChooser7 = new com.toedter.calendar.JDateChooser();
        outpatientdate1 = new com.toedter.calendar.JDateChooser();
        outpatientdate2 = new com.toedter.calendar.JDateChooser();
        outid_error = new javax.swing.JLabel();
        outfullname = new javax.swing.JLabel();
        outaddress = new javax.swing.JLabel();
        outroom = new javax.swing.JLabel();
        outmobile = new javax.swing.JLabel();
        outdisease = new javax.swing.JLabel();
        outdocid = new javax.swing.JLabel();
        outdocname = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        dailyincome = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        patient_signout = new javax.swing.JButton();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ROYAL+ HOSPITAL");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 280, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/No Shellfish_52px_1.png"))); // NOI18N
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 60, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Administrator Male_52px.png"))); // NOI18N
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 10, 60, 60));

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(" Adminstrator");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 20, 110, -1));

        jButton1.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Log Out?");
        jButton1.setBorder(null);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 50, 50, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 73));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/hospital-header.jpg"))); // NOI18N
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1240, 170));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/nurse.jpeg"))); // NOI18N
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 0, 210, 160));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 79, -1, 153));

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adddoctor.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        adddoctor.setForeground(new java.awt.Color(255, 255, 255));
        adddoctor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Plus Math_20px.png"))); // NOI18N
        adddoctor.setText("DOCTOR");
        adddoctor.setBorder(null);
        adddoctor.setContentAreaFilled(false);
        adddoctor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        adddoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adddoctorActionPerformed(evt);
            }
        });
        jPanel5.add(adddoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 90, -1));

        home.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Home_20px_1.png"))); // NOI18N
        home.setText("HOME");
        home.setBorder(null);
        home.setContentAreaFilled(false);
        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        jPanel5.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 70, -1));

        addpatient.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        addpatient.setForeground(new java.awt.Color(255, 255, 255));
        addpatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Plus Math_20px.png"))); // NOI18N
        addpatient.setText("PATIENT");
        addpatient.setBorder(null);
        addpatient.setContentAreaFilled(false);
        addpatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addpatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpatientActionPerformed(evt);
            }
        });
        jPanel5.add(addpatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 90, -1));

        addreceptionist.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        addreceptionist.setForeground(new java.awt.Color(255, 255, 255));
        addreceptionist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Plus Math_20px.png"))); // NOI18N
        addreceptionist.setText("RECEPTIONIST");
        addreceptionist.setBorder(null);
        addreceptionist.setContentAreaFilled(false);
        addreceptionist.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addreceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addreceptionistActionPerformed(evt);
            }
        });
        jPanel5.add(addreceptionist, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 130, -1));

        addaccountant.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        addaccountant.setForeground(new java.awt.Color(255, 255, 255));
        addaccountant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Plus Math_20px.png"))); // NOI18N
        addaccountant.setText("ACCOUNTANT");
        addaccountant.setBorder(null);
        addaccountant.setContentAreaFilled(false);
        addaccountant.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addaccountant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addaccountantActionPerformed(evt);
            }
        });
        jPanel5.add(addaccountant, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        addlaboritorist.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        addlaboritorist.setForeground(new java.awt.Color(255, 255, 255));
        addlaboritorist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Plus Math_20px.png"))); // NOI18N
        addlaboritorist.setText("LABORITORIST");
        addlaboritorist.setBorder(null);
        addlaboritorist.setContentAreaFilled(false);
        addlaboritorist.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addlaboritorist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addlaboritoristActionPerformed(evt);
            }
        });
        jPanel5.add(addlaboritorist, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, -1, -1));

        addpharmacist.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        addpharmacist.setForeground(new java.awt.Color(255, 255, 255));
        addpharmacist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Plus Math_20px.png"))); // NOI18N
        addpharmacist.setText("PHARMACIST");
        addpharmacist.setBorder(null);
        addpharmacist.setContentAreaFilled(false);
        addpharmacist.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addpharmacist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpharmacistActionPerformed(evt);
            }
        });
        jPanel5.add(addpharmacist, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 10, -1, -1));

        view.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        view.setForeground(new java.awt.Color(255, 255, 255));
        view.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        view.setText("VIEW");
        view.setBorder(null);
        view.setContentAreaFilled(false);
        view.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        jPanel5.add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 10, 70, -1));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 238, 1400, 41));

        layeredPane.setLayout(new java.awt.CardLayout());

        homeimage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/lab2.jpg"))); // NOI18N

        javax.swing.GroupLayout homepanelLayout = new javax.swing.GroupLayout(homepanel);
        homepanel.setLayout(homepanelLayout);
        homepanelLayout.setHorizontalGroup(
            homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homeimage, javax.swing.GroupLayout.PREFERRED_SIZE, 968, Short.MAX_VALUE)
        );
        homepanelLayout.setVerticalGroup(
            homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepanelLayout.createSequentialGroup()
                .addComponent(homeimage, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layeredPane.add(homepanel, "card2");

        doctorpanel.setBackground(new java.awt.Color(51, 51, 51));
        doctorpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        doctorpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Doc_title.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Doc_title.setForeground(new java.awt.Color(255, 255, 255));
        Doc_title.setText("ADD NEW DOCTOR");
        doctorpanel.add(Doc_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));
        doctorpanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 910, 10));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Doctor_ID:");
        doctorpanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 80, -1));

        doc_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_id.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doc_idMouseClicked(evt);
            }
        });
        doc_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_idKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 160, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("First_Name:");
        doctorpanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        doc_firstname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_firstname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_firstnameKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_firstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 160, -1));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Last_Name:");
        doctorpanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        doc_lastname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_lastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_lastnameKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_lastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 160, -1));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Address:");
        doctorpanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 50, -1));

        doc_address.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_addressKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 160, -1));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Mobile:");
        doctorpanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, -1, -1));

        doc_mobile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_mobileKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 160, -1));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Email:");
        doctorpanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, 50, -1));

        doc_email.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_emailKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 300, 160, -1));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Password:");
        doctorpanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, -1, -1));

        jLabel16.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Specialization:");
        doctorpanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, -1, -1));

        doc_specialization.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_specialization.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_specializationKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_specialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 290, 160, -1));

        jLabel17.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Date of Birth:");
        doctorpanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, -1));

        doc_add.setBackground(new java.awt.Color(51, 51, 51));
        doc_add.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        doc_add.setForeground(new java.awt.Color(255, 255, 255));
        doc_add.setText("ADD");
        doc_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_addActionPerformed(evt);
            }
        });
        doctorpanel.add(doc_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, -1, -1));
        doctorpanel.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 900, 10));

        doc_update.setBackground(new java.awt.Color(51, 51, 51));
        doc_update.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        doc_update.setForeground(new java.awt.Color(255, 255, 255));
        doc_update.setText("UPDATE");
        doc_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_updateActionPerformed(evt);
            }
        });
        doctorpanel.add(doc_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 440, -1, -1));

        doc_delete.setBackground(new java.awt.Color(51, 51, 51));
        doc_delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        doc_delete.setForeground(new java.awt.Color(255, 255, 255));
        doc_delete.setText("DELETE");
        doc_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_deleteActionPerformed(evt);
            }
        });
        doctorpanel.add(doc_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 440, -1, -1));

        jLabel18.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Department:");
        doctorpanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, -1, -1));

        doc_department.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_department.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_departmentKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_department, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 150, 160, -1));

        jLabel19.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Start_Date:");
        doctorpanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, -1));

        jLabel20.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Gender:");
        doctorpanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 60, -1, 20));

        doc_genderM.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(doc_genderM);
        doc_genderM.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        doc_genderM.setForeground(new java.awt.Color(0, 255, 255));
        doc_genderM.setText("Male");
        doc_genderM.setContentAreaFilled(false);
        doc_genderM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_genderMActionPerformed(evt);
            }
        });
        doctorpanel.add(doc_genderM, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 60, -1));

        buttonGroup1.add(doc_genderF);
        doc_genderF.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        doc_genderF.setForeground(new java.awt.Color(0, 255, 255));
        doc_genderF.setText("Female");
        doc_genderF.setContentAreaFilled(false);
        doc_genderF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_genderFActionPerformed(evt);
            }
        });
        doctorpanel.add(doc_genderF, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 60, -1, -1));

        jLabel21.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Country:");
        doctorpanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, -1, -1));

        doc_country.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Country", "Nigeria", "Guinea", "Liberia", "Cameroon", "Ivory Coast", "Gambia", "Mali", "Senegal", "Sierra Leone", "Burkina Faso", "Guinea Bissau", "Ghana", "Benin", "Togo", "Cape Verde", " " }));
        doctorpanel.add(doc_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 100, 160, -1));

        jLabel22.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("End_Date:");
        doctorpanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 250, -1, -1));

        doc_reset.setBackground(new java.awt.Color(51, 51, 51));
        doc_reset.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        doc_reset.setForeground(new java.awt.Color(255, 255, 255));
        doc_reset.setText("RESET");
        doc_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doc_resetActionPerformed(evt);
            }
        });
        doctorpanel.add(doc_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 440, -1, -1));

        jLabel33.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Retype_Password:");
        doctorpanel.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, 20));

        doc_repassword.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_repassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_repasswordKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_repassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 380, 160, -1));

        doc_password.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doc_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doc_passwordKeyReleased(evt);
            }
        });
        doctorpanel.add(doc_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 340, 160, -1));

        jDateChooser1.setDateFormatString("yyy-MM-dd");
        doctorpanel.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 160, 30));

        jButton7.setBackground(new java.awt.Color(51, 51, 51));
        jButton7.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("RETRIEVE");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        doctorpanel.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 430, -1, -1));

        jDateChooser8.setDateFormatString("yyyy-MM-dd");
        doctorpanel.add(jDateChooser8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 160, 30));

        jDateChooser9.setDateFormatString("yyyy-MM-dd");
        doctorpanel.add(jDateChooser9, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 240, 160, 30));

        fnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        fnameerror.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(fnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 104, 120, 20));

        lnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        lnameerror.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(lnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 120, 20));

        addresserror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        addresserror.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(addresserror, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 224, 120, 20));

        mobile_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        mobile_error.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(mobile_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 264, 120, 20));

        email_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        email_error.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(email_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 304, 120, 20));

        pass_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        pass_error.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(pass_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 340, 120, 20));

        repass_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        repass_error.setForeground(new java.awt.Color(255, 0, 102));
        doctorpanel.add(repass_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, 120, 20));

        dept_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        dept_error.setForeground(new java.awt.Color(255, 0, 0));
        doctorpanel.add(dept_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 150, 120, 20));

        special_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        special_error.setForeground(new java.awt.Color(255, 0, 0));
        doctorpanel.add(special_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 290, 120, 20));

        id_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        id_error.setForeground(new java.awt.Color(255, 0, 51));
        doctorpanel.add(id_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 64, 120, 20));

        layeredPane.add(doctorpanel, "card3");

        patientpanel.setBackground(new java.awt.Color(51, 51, 51));
        patientpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        patientpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patient_title.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        patient_title.setForeground(new java.awt.Color(255, 255, 255));
        patient_title.setText("ADD NEW PATIENT");
        patientpanel.add(patient_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));
        patientpanel.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 42, 920, 10));

        jLabel24.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Patient_Id:");
        patientpanel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 70, 20));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Full_Name:");
        patientpanel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        jLabel26.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Date of Birth:");
        patientpanel.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

        jLabel27.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Address:");
        patientpanel.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, -1, -1));

        jLabel28.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Mobile:");
        patientpanel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, -1, -1));

        jLabel29.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Disease:");
        patientpanel.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 140, -1, -1));

        jLabel30.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Doctor_ID:");
        patientpanel.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 210, -1, -1));

        jLabel31.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setText("Doctor_Name:");
        patientpanel.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 270, -1, -1));

        patient_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patient_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patient_idKeyReleased(evt);
            }
        });
        patientpanel.add(patient_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 60, 40));

        patient_fullname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patient_fullname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patient_fullnameKeyReleased(evt);
            }
        });
        patientpanel.add(patient_fullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 160, -1));

        patient_address.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patient_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patient_addressKeyReleased(evt);
            }
        });
        patientpanel.add(patient_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 160, -1));

        patient_mobile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patient_mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patient_mobileKeyReleased(evt);
            }
        });
        patientpanel.add(patient_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 70, 160, -1));

        patient_disease.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patient_disease.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patient_diseaseKeyReleased(evt);
            }
        });
        patientpanel.add(patient_disease, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 140, 160, -1));

        patientdoc_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patientdoc_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patientdoc_idKeyReleased(evt);
            }
        });
        patientpanel.add(patientdoc_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 210, 160, -1));

        patientdoc_name.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        patientdoc_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patientdoc_nameKeyReleased(evt);
            }
        });
        patientpanel.add(patientdoc_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, 160, -1));
        patientpanel.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 910, 10));

        patient_add.setBackground(new java.awt.Color(51, 51, 51));
        patient_add.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        patient_add.setForeground(new java.awt.Color(255, 255, 255));
        patient_add.setText("ADD");
        patient_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_addActionPerformed(evt);
            }
        });
        patientpanel.add(patient_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, -1, -1));

        patient_update.setBackground(new java.awt.Color(51, 51, 51));
        patient_update.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        patient_update.setForeground(new java.awt.Color(255, 255, 255));
        patient_update.setText("UPDATE");
        patient_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_updateActionPerformed(evt);
            }
        });
        patientpanel.add(patient_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, -1, -1));

        patient_delete.setBackground(new java.awt.Color(51, 51, 51));
        patient_delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        patient_delete.setForeground(new java.awt.Color(255, 255, 255));
        patient_delete.setText("DELETE");
        patient_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_deleteActionPerformed(evt);
            }
        });
        patientpanel.add(patient_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 390, -1, -1));

        patient_reset.setBackground(new java.awt.Color(51, 51, 51));
        patient_reset.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        patient_reset.setForeground(new java.awt.Color(255, 255, 255));
        patient_reset.setText("RESET");
        patient_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_resetActionPerformed(evt);
            }
        });
        patientpanel.add(patient_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 390, -1, -1));

        patientroom.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        patientroom.setForeground(new java.awt.Color(255, 255, 255));
        patientroom.setText("Room_Number:");
        patientpanel.add(patientroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        patient_admitted.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patient_admittedKeyReleased(evt);
            }
        });
        patientpanel.add(patient_admitted, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 300, 160, 30));

        dateofbirth.setDateFormatString(" yyy-MM-dd");
        patientpanel.add(dateofbirth, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 160, 30));

        p_iderror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        p_iderror.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(p_iderror, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 110, 20));

        fullname_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        fullname_error.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(fullname_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 120, 20));

        p_addresserror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        p_addresserror.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(p_addresserror, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, 130, 20));

        p_roomerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        p_roomerror.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(p_roomerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, 130, 20));

        p_mobileerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        p_mobileerror.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(p_mobileerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 70, 120, 20));

        disease_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        disease_error.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(disease_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 144, 120, 20));

        docid_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        docid_error.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(docid_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 210, 120, 20));

        p_docnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        p_docnameerror.setForeground(new java.awt.Color(0, 255, 255));
        patientpanel.add(p_docnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 274, 120, 20));

        jButton8.setBackground(new java.awt.Color(51, 51, 51));
        jButton8.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("RETRIEVE");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        patientpanel.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 400, -1, -1));

        layeredPane.add(patientpanel, "card4");

        receptionistpanel.setBackground(new java.awt.Color(51, 51, 51));
        receptionistpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        receptionistpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        recept_title.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        recept_title.setForeground(new java.awt.Color(255, 255, 255));
        recept_title.setText("ADD NEW RECEPTIONIST");
        receptionistpanel.add(recept_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));
        receptionistpanel.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 42, 920, 20));

        jLabel34.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("ID:");
        receptionistpanel.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 20, -1));

        jLabel35.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("First_Name:");
        receptionistpanel.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        jLabel36.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Last_Name:");
        receptionistpanel.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, -1));

        jLabel37.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Date of Birth:");
        receptionistpanel.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        jLabel38.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Country:");
        receptionistpanel.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, -1, -1));

        jLabel39.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Gender:");
        receptionistpanel.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, -1, -1));

        jLabel40.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("Password:");
        receptionistpanel.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 140, -1, -1));

        jLabel41.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Retype_Password:");
        receptionistpanel.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 190, -1, -1));

        jLabel42.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("Mobile:");
        receptionistpanel.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 240, -1, -1));

        jLabel43.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Home_Address:");
        receptionistpanel.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 290, -1, -1));

        recept_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_idKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 60, 30));

        recept_firstname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_firstname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_firstnameKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_firstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 150, -1));

        recept_lastname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_lastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_lastnameKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_lastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 150, -1));

        jLabel44.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("Email_Address:");
        receptionistpanel.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, -1, -1));

        recept_country.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Country", "Nigeria", "Guinea", "Liberia", "Cameroon", "Ivory Coast", "Gambia", "Mali", "Senegal", "Sierra Leone", "Burkina Faso", "Guinea Bissau", "Ghana", "Benin", "Togo", "Cape Verde", " " }));
        recept_country.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_countryActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, 150, -1));

        buttonGroup2.add(recept_genderM);
        recept_genderM.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recept_genderM.setForeground(new java.awt.Color(0, 255, 255));
        recept_genderM.setText("Male");
        recept_genderM.setBorder(null);
        recept_genderM.setContentAreaFilled(false);
        recept_genderM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_genderMActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_genderM, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 340, -1, -1));

        buttonGroup2.add(recept_genderF);
        recept_genderF.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recept_genderF.setForeground(new java.awt.Color(0, 255, 255));
        recept_genderF.setText("Female");
        recept_genderF.setBorder(null);
        recept_genderF.setContentAreaFilled(false);
        recept_genderF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_genderFActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_genderF, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 340, -1, -1));

        recept_email.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_emailKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 80, 150, -1));

        recept_password.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_passwordKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 150, -1));

        recept_repassword.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_repassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_repasswordKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_repassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 190, 150, -1));

        recept_mobile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_mobileKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 240, 150, -1));

        recept_address.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        recept_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                recept_addressKeyReleased(evt);
            }
        });
        receptionistpanel.add(recept_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 290, 150, -1));
        receptionistpanel.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 920, 20));

        recept_add.setBackground(new java.awt.Color(51, 51, 51));
        recept_add.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        recept_add.setForeground(new java.awt.Color(255, 255, 255));
        recept_add.setText("ADD");
        recept_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_addActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, -1, -1));

        recept_update.setBackground(new java.awt.Color(51, 51, 51));
        recept_update.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        recept_update.setForeground(new java.awt.Color(255, 255, 255));
        recept_update.setText("UPDATE");
        recept_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_updateActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 410, -1, -1));

        recept_delete.setBackground(new java.awt.Color(51, 51, 51));
        recept_delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        recept_delete.setForeground(new java.awt.Color(255, 255, 255));
        recept_delete.setText("DELETE");
        recept_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_deleteActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 410, -1, -1));

        recept_reset.setBackground(new java.awt.Color(51, 51, 51));
        recept_reset.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        recept_reset.setForeground(new java.awt.Color(255, 255, 255));
        recept_reset.setText("RESET");
        recept_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recept_resetActionPerformed(evt);
            }
        });
        receptionistpanel.add(recept_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 410, -1, -1));

        jDateChooser3.setDateFormatString("yyy-MM-dd");
        receptionistpanel.add(jDateChooser3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 150, 30));

        recep_iderror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_iderror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_iderror, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 84, 110, 20));

        recep_fnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_fnameerror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_fnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 120, 20));

        recep_lnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_lnameerror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_lnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 120, 20));

        recep_emailerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_emailerror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_emailerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 80, 110, 20));

        recep_passerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_passerror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_passerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 140, 110, 20));

        recep_repasserror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_repasserror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_repasserror, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 190, 110, 20));

        recep_mobileerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_mobileerror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_mobileerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 240, 110, 20));

        recep_addresserror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        recep_addresserror.setForeground(new java.awt.Color(51, 255, 255));
        receptionistpanel.add(recep_addresserror, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 294, 110, 20));

        jButton9.setBackground(new java.awt.Color(51, 51, 51));
        jButton9.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("RETRIEVE");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        receptionistpanel.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 410, -1, -1));

        layeredPane.add(receptionistpanel, "card5");

        accountantpanel.setBackground(new java.awt.Color(51, 51, 51));
        accountantpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        accountantpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        account_title.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        account_title.setForeground(new java.awt.Color(255, 255, 255));
        account_title.setText("ADD NEW ACCOUNTANT");
        accountantpanel.add(account_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));
        accountantpanel.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 42, 910, 20));

        jLabel45.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("ID:");
        accountantpanel.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 30, -1));

        jLabel47.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setText("First_Name:");
        accountantpanel.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        jLabel48.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("Last_Name:");
        accountantpanel.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, -1, -1));

        jLabel49.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("Date of Birth:");
        accountantpanel.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        jLabel50.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("Country:");
        accountantpanel.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, -1, -1));

        jLabel51.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(255, 255, 255));
        jLabel51.setText("Gender:");
        accountantpanel.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 330, -1, -1));

        account_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                account_idKeyReleased(evt);
            }
        });
        accountantpanel.add(account_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 60, 30));

        account_firstname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_firstname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                account_firstnameKeyReleased(evt);
            }
        });
        accountantpanel.add(account_firstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 130, -1));

        account_lastname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_lastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                account_lastnameKeyReleased(evt);
            }
        });
        accountantpanel.add(account_lastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 130, -1));

        account_country.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select County", "Nigeria", "Guinea", "Liberia", "Cameroon", "Ivory Coast", "Gambia", "Mali", "Senegal", "Sierra Leone", "Burkina Faso", "Guinea Bissau", "Ghana", "Benin", "Togo", "Cape Verde", " " }));
        accountantpanel.add(account_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 130, -1));

        buttonGroup3.add(account_genderM);
        account_genderM.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_genderM.setForeground(new java.awt.Color(0, 255, 255));
        account_genderM.setText("Male");
        account_genderM.setBorder(null);
        account_genderM.setContentAreaFilled(false);
        account_genderM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_genderMActionPerformed(evt);
            }
        });
        accountantpanel.add(account_genderM, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 330, 60, -1));

        buttonGroup3.add(account_genderF);
        account_genderF.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_genderF.setForeground(new java.awt.Color(0, 255, 255));
        account_genderF.setText("Female");
        account_genderF.setBorder(null);
        account_genderF.setContentAreaFilled(false);
        account_genderF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_genderFActionPerformed(evt);
            }
        });
        accountantpanel.add(account_genderF, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 330, -1, -1));

        jLabel52.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setText("Email_Address:");
        accountantpanel.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, -1, -1));

        jLabel53.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(255, 255, 255));
        jLabel53.setText("Password:");
        accountantpanel.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 130, -1, -1));

        jLabel54.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("Retype_Password:");
        accountantpanel.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, -1, -1));

        jLabel55.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("Mobile:");
        accountantpanel.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 220, -1, -1));

        jLabel56.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(255, 255, 255));
        jLabel56.setText("Home_Address:");
        accountantpanel.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 270, -1, -1));

        account_email.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                account_emailKeyReleased(evt);
            }
        });
        accountantpanel.add(account_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 80, 140, -1));

        account_mobile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                account_mobileKeyReleased(evt);
            }
        });
        accountantpanel.add(account_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 220, 140, -1));

        account_address.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        account_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                account_addressKeyReleased(evt);
            }
        });
        accountantpanel.add(account_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 270, 140, -1));
        accountantpanel.add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 920, 20));

        account_add.setBackground(new java.awt.Color(51, 51, 51));
        account_add.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        account_add.setForeground(new java.awt.Color(255, 255, 255));
        account_add.setText("ADD");
        account_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_addActionPerformed(evt);
            }
        });
        accountantpanel.add(account_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, -1, -1));

        account_update.setBackground(new java.awt.Color(51, 51, 51));
        account_update.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        account_update.setForeground(new java.awt.Color(255, 255, 255));
        account_update.setText("UPDATE");
        account_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_updateActionPerformed(evt);
            }
        });
        accountantpanel.add(account_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 410, -1, -1));

        account_delete.setBackground(new java.awt.Color(51, 51, 51));
        account_delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        account_delete.setForeground(new java.awt.Color(255, 255, 255));
        account_delete.setText("DELETE");
        account_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_deleteActionPerformed(evt);
            }
        });
        accountantpanel.add(account_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 400, -1, -1));

        account_reset.setBackground(new java.awt.Color(51, 51, 51));
        account_reset.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        account_reset.setForeground(new java.awt.Color(255, 255, 255));
        account_reset.setText("RESET");
        account_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_resetActionPerformed(evt);
            }
        });
        accountantpanel.add(account_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 400, -1, -1));

        jDateChooser4.setDateFormatString("yyy-MM-dd");
        accountantpanel.add(jDateChooser4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 130, -1));

        account_iderror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_iderror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_iderror, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 74, 120, 20));

        account_fnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_fnameerror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_fnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 120, 20));

        account_lnameerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_lnameerror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_lnameerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, 130, 20));

        account_emailerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_emailerror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_emailerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 80, 110, 20));

        account_passerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_passerror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_passerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 134, 110, 20));

        account_repasserror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_repasserror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_repasserror, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 180, 100, 20));

        account_mobileerror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_mobileerror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_mobileerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 220, 110, 20));

        account_addresserror.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        account_addresserror.setForeground(new java.awt.Color(51, 255, 255));
        accountantpanel.add(account_addresserror, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 274, 110, 20));

        account_password1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        accountantpanel.add(account_password1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 130, 140, -1));

        account_repassword1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        accountantpanel.add(account_repassword1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 180, 140, -1));

        jButton10.setBackground(new java.awt.Color(51, 51, 51));
        jButton10.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("RETRIEVE");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        accountantpanel.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 400, -1, -1));

        layeredPane.add(accountantpanel, "card6");

        laboritoristpanel.setBackground(new java.awt.Color(51, 51, 51));
        laboritoristpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        laboritoristpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lab_title.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lab_title.setForeground(new java.awt.Color(255, 255, 255));
        lab_title.setText("ADD NEW LABORITORIST");
        laboritoristpanel.add(lab_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, 30));
        laboritoristpanel.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 42, 910, 10));

        jLabel58.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setText("ID:");
        laboritoristpanel.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 20, -1));

        jLabel59.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        jLabel59.setText("First_Name:");
        laboritoristpanel.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, -1, -1));

        jLabel60.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(255, 255, 255));
        jLabel60.setText("Last_Name:");
        laboritoristpanel.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, -1));

        jLabel61.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(255, 255, 255));
        jLabel61.setText("Date of Birth:");
        laboritoristpanel.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        jLabel62.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(255, 255, 255));
        jLabel62.setText("Gender:");
        laboritoristpanel.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 340, -1, -1));

        lab_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_idKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 60, 30));

        lab_firstname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_firstname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_firstnameKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_firstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 140, -1));

        lab_lastname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_lastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_lastnameKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_lastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 140, -1));

        jLabel63.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(255, 255, 255));
        jLabel63.setText("Country:");
        laboritoristpanel.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, -1, -1));

        lab_country.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Country", "Nigeria", "Guinea", "Liberia", "Cameroon", "Ivory Coast", "Gambia", "Mali", "Senegal", "Sierra Leone", "Burkina Faso", "Guinea Bissau", "Ghana", "Benin", "Togo", "Cape Verde", " " }));
        laboritoristpanel.add(lab_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, 140, -1));

        buttonGroup4.add(lab_genderM);
        lab_genderM.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        lab_genderM.setForeground(new java.awt.Color(51, 255, 255));
        lab_genderM.setText("Male");
        lab_genderM.setBorder(null);
        lab_genderM.setContentAreaFilled(false);
        lab_genderM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_genderMActionPerformed(evt);
            }
        });
        laboritoristpanel.add(lab_genderM, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, -1, -1));

        buttonGroup4.add(lab_genderF);
        lab_genderF.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        lab_genderF.setForeground(new java.awt.Color(51, 255, 255));
        lab_genderF.setText("Female");
        lab_genderF.setBorder(null);
        lab_genderF.setContentAreaFilled(false);
        lab_genderF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_genderFActionPerformed(evt);
            }
        });
        laboritoristpanel.add(lab_genderF, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, -1, -1));

        jLabel64.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(255, 255, 255));
        jLabel64.setText("Email_Adress:");
        laboritoristpanel.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 90, -1, -1));

        jLabel65.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel65.setForeground(new java.awt.Color(255, 255, 255));
        jLabel65.setText("Password:");
        laboritoristpanel.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 140, -1, -1));

        jLabel66.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(255, 255, 255));
        jLabel66.setText("Retype_Password:");
        laboritoristpanel.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 190, -1, -1));

        jLabel67.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(255, 255, 255));
        jLabel67.setText("Mobile:");
        laboritoristpanel.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 240, -1, -1));

        jLabel68.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        jLabel68.setText("Home_Address:");
        laboritoristpanel.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 290, -1, -1));

        lab_email.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_emailKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 90, 140, -1));

        lab_password.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_passwordKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 140, -1));

        lab_repassword.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_repassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_repasswordKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_repassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 190, 140, -1));

        lab_mobile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_mobileKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 240, 140, -1));

        lab_address.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lab_addressKeyReleased(evt);
            }
        });
        laboritoristpanel.add(lab_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 290, 140, -1));
        laboritoristpanel.add(jSeparator10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 382, 910, 10));

        lab_add.setBackground(new java.awt.Color(51, 51, 51));
        lab_add.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lab_add.setForeground(new java.awt.Color(255, 255, 255));
        lab_add.setText("ADD");
        lab_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_addActionPerformed(evt);
            }
        });
        laboritoristpanel.add(lab_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, -1, -1));

        lab_update.setBackground(new java.awt.Color(51, 51, 51));
        lab_update.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lab_update.setForeground(new java.awt.Color(255, 255, 255));
        lab_update.setText("UPDATE");
        lab_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_updateActionPerformed(evt);
            }
        });
        laboritoristpanel.add(lab_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 420, -1, -1));

        lab_delete.setBackground(new java.awt.Color(51, 51, 51));
        lab_delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lab_delete.setForeground(new java.awt.Color(255, 255, 255));
        lab_delete.setText("DELETE");
        lab_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_deleteActionPerformed(evt);
            }
        });
        laboritoristpanel.add(lab_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 410, -1, -1));

        lab_reset.setBackground(new java.awt.Color(51, 51, 51));
        lab_reset.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lab_reset.setForeground(new java.awt.Color(255, 255, 255));
        lab_reset.setText("RESET");
        lab_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lab_resetActionPerformed(evt);
            }
        });
        laboritoristpanel.add(lab_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 410, -1, -1));

        jDateChooser5.setDateFormatString("yyy-MM-dd");
        laboritoristpanel.add(jDateChooser5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 140, -1));

        labid_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labid_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labid_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 84, 120, 20));

        labname_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labname_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labname_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, 120, 20));

        labname1_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labname1_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labname1_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 190, 120, 20));

        labemail_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labemail_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labemail_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 90, 120, 20));

        labpass_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labpass_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labpass_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 140, 120, 20));

        labrepass_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labrepass_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labrepass_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 190, 120, 20));

        labmobile_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labmobile_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labmobile_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 240, 120, 20));

        labaddress_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        labaddress_error.setForeground(new java.awt.Color(51, 255, 255));
        laboritoristpanel.add(labaddress_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 290, 110, 20));

        jButton11.setBackground(new java.awt.Color(51, 51, 51));
        jButton11.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("RETRIEVE");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        laboritoristpanel.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, -1, -1));

        layeredPane.add(laboritoristpanel, "card7");

        pharmacistpanel.setBackground(new java.awt.Color(51, 51, 51));
        pharmacistpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        pharmacistpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pha_title.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        pha_title.setForeground(new java.awt.Color(255, 255, 255));
        pha_title.setText("ADD NEW PHARMACIST");
        pharmacistpanel.add(pha_title, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, -1));
        pharmacistpanel.add(jSeparator11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 32, 940, 10));

        jLabel69.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 255, 255));
        jLabel69.setText("ID:");
        pharmacistpanel.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, -1, -1));

        jLabel71.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(255, 255, 255));
        jLabel71.setText("Firs_Name:");
        pharmacistpanel.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, -1, -1));

        jLabel72.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel72.setForeground(new java.awt.Color(255, 255, 255));
        jLabel72.setText("Last_Name:");
        pharmacistpanel.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, -1, -1));

        jLabel73.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(255, 255, 255));
        jLabel73.setText("Date of Birth:");
        pharmacistpanel.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, -1, -1));

        jLabel74.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel74.setForeground(new java.awt.Color(255, 255, 255));
        jLabel74.setText("Country:");
        pharmacistpanel.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, -1, -1));

        jLabel75.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel75.setForeground(new java.awt.Color(255, 255, 255));
        jLabel75.setText("Gender:");
        pharmacistpanel.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, -1));

        pha_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_idKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 60, 30));

        pha_firstname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_firstname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_firstnameKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_firstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 140, -1));

        pha_lastname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_lastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_lastnameKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_lastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 140, -1));

        pha_country.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_country.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Country", "Nigeria", "Guinea", "Liberia", "Cameroon", "Ivory Coast", "Gambia", "Mali", "Senegal", "Sierra Leone", "Burkina Faso", "Guinea Bissau", "Ghana", "Benin", "Togo", "Cape Verde", " " }));
        pharmacistpanel.add(pha_country, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 140, -1));

        buttonGroup5.add(pha_genderM);
        pha_genderM.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        pha_genderM.setForeground(new java.awt.Color(0, 255, 255));
        pha_genderM.setText("Male");
        pha_genderM.setBorder(null);
        pha_genderM.setContentAreaFilled(false);
        pha_genderM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_genderMActionPerformed(evt);
            }
        });
        pharmacistpanel.add(pha_genderM, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, -1, -1));

        buttonGroup5.add(pha_genderF);
        pha_genderF.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        pha_genderF.setForeground(new java.awt.Color(0, 255, 255));
        pha_genderF.setText("Female");
        pha_genderF.setBorder(null);
        pha_genderF.setContentAreaFilled(false);
        pha_genderF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_genderFActionPerformed(evt);
            }
        });
        pharmacistpanel.add(pha_genderF, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, -1, -1));

        jLabel76.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(255, 255, 255));
        jLabel76.setText("Email_Adress:");
        pharmacistpanel.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, -1, -1));

        jLabel77.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(255, 255, 255));
        jLabel77.setText("Password:");
        pharmacistpanel.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 110, -1, -1));

        jLabel78.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(255, 255, 255));
        jLabel78.setText("Retype_Password:");
        pharmacistpanel.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 170, -1, -1));

        jLabel79.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel79.setForeground(new java.awt.Color(255, 255, 255));
        jLabel79.setText("Mobile:");
        pharmacistpanel.add(jLabel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 220, -1, -1));

        jLabel80.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 255, 255));
        jLabel80.setText("Home_Address:");
        pharmacistpanel.add(jLabel80, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 270, -1, -1));

        pha_email.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_emailKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 60, 150, -1));

        pha_password.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_passwordKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 110, 150, -1));

        pha_repassword.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_repassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_repasswordKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_repassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 170, 150, -1));

        pha_mobile.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_mobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_mobileActionPerformed(evt);
            }
        });
        pha_mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_mobileKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 220, 150, -1));

        pha_address.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pha_address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pha_addressKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pha_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 270, 150, -1));
        pharmacistpanel.add(jSeparator12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 920, 20));

        pha_add.setBackground(new java.awt.Color(51, 51, 51));
        pha_add.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        pha_add.setForeground(new java.awt.Color(255, 255, 255));
        pha_add.setText("ADD");
        pha_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_addActionPerformed(evt);
            }
        });
        pharmacistpanel.add(pha_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, -1, -1));

        pha_update.setBackground(new java.awt.Color(51, 51, 51));
        pha_update.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        pha_update.setForeground(new java.awt.Color(255, 255, 255));
        pha_update.setText("UPDATE");
        pha_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_updateActionPerformed(evt);
            }
        });
        pharmacistpanel.add(pha_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 410, -1, -1));

        pha_delete.setBackground(new java.awt.Color(51, 51, 51));
        pha_delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        pha_delete.setForeground(new java.awt.Color(255, 255, 255));
        pha_delete.setText("DELETE");
        pha_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_deleteActionPerformed(evt);
            }
        });
        pharmacistpanel.add(pha_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, -1, -1));

        pha_reset.setBackground(new java.awt.Color(51, 51, 51));
        pha_reset.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        pha_reset.setForeground(new java.awt.Color(255, 255, 255));
        pha_reset.setText("RESET");
        pha_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pha_resetActionPerformed(evt);
            }
        });
        pharmacistpanel.add(pha_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 410, -1, -1));

        jDateChooser6.setDateFormatString("yyy-MM-dd");
        pharmacistpanel.add(jDateChooser6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 220, 140, -1));

        jButton12.setBackground(new java.awt.Color(51, 51, 51));
        jButton12.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setText("RETRIEVE");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        pharmacistpanel.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 410, -1, -1));

        phaid_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phaid_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phaid_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 54, 120, 20));

        phafname_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phafname_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phafname_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 120, 20));

        phalname_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phalname_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phalname_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, 130, 20));

        phaemail_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phaemail_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phaemail_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 60, 100, 20));

        phapassword_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phapassword_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phapassword_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 110, 110, 20));

        pharepass_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        pharepass_error.setForeground(new java.awt.Color(51, 255, 255));
        pharepass_error.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pharepass_errorKeyReleased(evt);
            }
        });
        pharmacistpanel.add(pharepass_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 170, 110, 20));

        phamobile_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phamobile_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phamobile_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 220, 110, 20));

        phaaddress_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        phaaddress_error.setForeground(new java.awt.Color(51, 255, 255));
        pharmacistpanel.add(phaaddress_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 270, 110, 20));

        layeredPane.add(pharmacistpanel, "card8");

        viewpanel.setBackground(new java.awt.Color(51, 51, 51));
        viewpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        viewpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        viewdoctors.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        viewdoctors.setForeground(new java.awt.Color(255, 255, 255));
        viewdoctors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        viewdoctors.setText("Doctors");
        viewdoctors.setContentAreaFilled(false);
        viewdoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewdoctorsActionPerformed(evt);
            }
        });
        viewpanel.add(viewdoctors, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 130, -1));

        viewpatients.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        viewpatients.setForeground(new java.awt.Color(255, 255, 255));
        viewpatients.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        viewpatients.setText("Patients");
        viewpatients.setContentAreaFilled(false);
        viewpatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewpatientsActionPerformed(evt);
            }
        });
        viewpanel.add(viewpatients, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, -1, -1));

        viewrecepts.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        viewrecepts.setForeground(new java.awt.Color(255, 255, 255));
        viewrecepts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        viewrecepts.setText("Receptionists");
        viewrecepts.setContentAreaFilled(false);
        viewrecepts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewreceptsActionPerformed(evt);
            }
        });
        viewpanel.add(viewrecepts, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        viewaccountants.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        viewaccountants.setForeground(new java.awt.Color(255, 255, 255));
        viewaccountants.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        viewaccountants.setText("Accountants");
        viewaccountants.setContentAreaFilled(false);
        viewaccountants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewaccountantsActionPerformed(evt);
            }
        });
        viewpanel.add(viewaccountants, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        viewlabs.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        viewlabs.setForeground(new java.awt.Color(255, 255, 255));
        viewlabs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        viewlabs.setText("Laboritorists");
        viewlabs.setContentAreaFilled(false);
        viewlabs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewlabsActionPerformed(evt);
            }
        });
        viewpanel.add(viewlabs, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 30, -1, -1));

        viewphar.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        viewphar.setForeground(new java.awt.Color(255, 255, 255));
        viewphar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/Visible_20px.png"))); // NOI18N
        viewphar.setText("Pharmacists");
        viewphar.setContentAreaFilled(false);
        viewphar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewpharActionPerformed(evt);
            }
        });
        viewpanel.add(viewphar, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 30, -1, -1));
        viewpanel.add(jSeparator13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 940, -1));

        jLabel46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/lab3.jpg"))); // NOI18N
        viewpanel.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 960, 410));

        layeredPane.add(viewpanel, "card9");

        patientsignoutpanel.setBackground(new java.awt.Color(51, 51, 51));
        patientsignoutpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        patientsignoutpanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientsignoutpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel57.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("SIGN PATIENT OUT");
        patientsignoutpanel.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));
        patientsignoutpanel.add(jSeparator14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 42, 950, 10));

        jLabel32.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Patient_ID:");
        patientsignoutpanel.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel70.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(255, 255, 255));
        jLabel70.setText("Full_Name:");
        patientsignoutpanel.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));

        jLabel81.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(255, 255, 255));
        jLabel81.setText("Date of Birth:");
        patientsignoutpanel.add(jLabel81, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, -1, -1));

        jLabel82.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(255, 255, 255));
        jLabel82.setText("Address:");
        patientsignoutpanel.add(jLabel82, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, -1, -1));

        jLabel83.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel83.setForeground(new java.awt.Color(255, 255, 255));
        jLabel83.setText("Room_Number:");
        patientsignoutpanel.add(jLabel83, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        jLabel84.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel84.setForeground(new java.awt.Color(255, 255, 255));
        jLabel84.setText("Mobile:");
        patientsignoutpanel.add(jLabel84, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, -1, -1));

        jLabel85.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel85.setForeground(new java.awt.Color(255, 255, 255));
        jLabel85.setText("Disease:");
        patientsignoutpanel.add(jLabel85, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 70, -1, -1));

        jLabel86.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel86.setForeground(new java.awt.Color(255, 255, 255));
        jLabel86.setText("Doctor_ID:");
        patientsignoutpanel.add(jLabel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, -1, -1));

        jLabel87.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel87.setForeground(new java.awt.Color(255, 255, 255));
        jLabel87.setText("Doctor_Name:");
        patientsignoutpanel.add(jLabel87, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 170, -1, -1));

        jLabel88.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel88.setForeground(new java.awt.Color(255, 255, 255));
        jLabel88.setText("Date_Admitted:");
        patientsignoutpanel.add(jLabel88, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 230, -1, -1));

        jLabel89.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel89.setForeground(new java.awt.Color(255, 255, 255));
        jLabel89.setText("Leave_Date:");
        patientsignoutpanel.add(jLabel89, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 280, -1, -1));

        outpatient_id.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatient_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatient_idKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatient_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 50, 30));

        outpatientfullname.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientfullname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientfullnameKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientfullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 150, 30));

        outpatientaddress.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientaddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientaddressKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientaddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 150, -1));

        outpatientroom.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientroom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientroomKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 150, -1));

        outpatientmobile.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientmobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientmobileKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientmobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 150, -1));

        outpatientdisease.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientdisease.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientdiseaseKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientdisease, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, 130, -1));

        outpatientdocid.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientdocid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientdocidKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientdocid, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 120, 130, -1));

        outpatientdocname.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outpatientdocname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outpatientdocnameKeyReleased(evt);
            }
        });
        patientsignoutpanel.add(outpatientdocname, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 170, 130, -1));
        patientsignoutpanel.add(jSeparator15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 352, 930, 20));

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("SIGNOUT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        patientsignoutpanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 400, -1, -1));

        jButton6.setBackground(new java.awt.Color(51, 51, 51));
        jButton6.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("RESET");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        patientsignoutpanel.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 400, -1, -1));

        jDateChooser7.setDateFormatString("yyy-MM-dd");
        patientsignoutpanel.add(jDateChooser7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 150, 30));

        outpatientdate1.setDateFormatString("yyy-MM-dd");
        patientsignoutpanel.add(outpatientdate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 220, 130, 30));

        outpatientdate2.setDateFormatString("yyy-MM-dd");
        patientsignoutpanel.add(outpatientdate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 270, 130, 30));

        outid_error.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outid_error.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outid_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 64, 110, 20));

        outfullname.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outfullname.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outfullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 120, 20));

        outaddress.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outaddress.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outaddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 220, 120, 20));

        outroom.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outroom.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, 120, 20));

        outmobile.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outmobile.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outmobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, 120, 20));

        outdisease.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outdisease.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outdisease, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 70, 100, 20));

        outdocid.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outdocid.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outdocid, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 120, 100, 20));

        outdocname.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        outdocname.setForeground(new java.awt.Color(51, 255, 255));
        patientsignoutpanel.add(outdocname, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 170, 100, 20));

        layeredPane.add(patientsignoutpanel, "card10");

        jPanel1.add(layeredPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 307, -1, 490));

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102), 2));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dailyincome.setBackground(new java.awt.Color(51, 51, 51));
        dailyincome.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        dailyincome.setForeground(new java.awt.Color(255, 255, 255));
        dailyincome.setText("Cash Income");
        dailyincome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dailyincome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dailyincomeActionPerformed(evt);
            }
        });
        jPanel6.add(dailyincome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 40));

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Verve Card Income");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 160, 40));

        jButton4.setBackground(new java.awt.Color(51, 51, 51));
        jButton4.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Attendance");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 160, 40));

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Visa Card Income");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 160, 40));

        jButton13.setBackground(new java.awt.Color(51, 51, 51));
        jButton13.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setText("Master Card Income");
        jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 160, 40));

        jButton14.setBackground(new java.awt.Color(51, 51, 51));
        jButton14.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setText("OUT PATIENT");
        jButton14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 160, 40));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 430, 160, 370));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/room.jpg"))); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 200, 130));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/check.png"))); // NOI18N
        jLabel23.setText("jLabel23");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 350, 130, 60));

        patient_signout.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        patient_signout.setForeground(new java.awt.Color(153, 255, 51));
        patient_signout.setText("SIGN PATIENT OUT ");
        patient_signout.setBorder(null);
        patient_signout.setContentAreaFilled(false);
        patient_signout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patient_signout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patient_signoutActionPerformed(evt);
            }
        });
        jPanel1.add(patient_signout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 310, 170, -1));

        jLabel90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/room2.jpg"))); // NOI18N
        jPanel1.add(jLabel90, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 200, 130));

        jLabel91.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mymainjavaproject/images/room3.jpg"))); // NOI18N
        jPanel1.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 660, 200, 140));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1390, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AdminSignIn adm = new AdminSignIn();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pha_mobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_mobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pha_mobileActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        // TODO add your handling code here:
        changePanel(homepanel);
    }//GEN-LAST:event_homeActionPerformed

    private void adddoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adddoctorActionPerformed
        // TODO add your handling code here:
        changePanel(doctorpanel);
    }//GEN-LAST:event_adddoctorActionPerformed

    private void addpatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpatientActionPerformed
        // TODO add your handling code here:
        changePanel(patientpanel);
    }//GEN-LAST:event_addpatientActionPerformed

    private void addreceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addreceptionistActionPerformed
        // TODO add your handling code here:
        changePanel(receptionistpanel);
    }//GEN-LAST:event_addreceptionistActionPerformed

    private void addaccountantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addaccountantActionPerformed
        // TODO add your handling code here:
        changePanel(accountantpanel);
    }//GEN-LAST:event_addaccountantActionPerformed

    private void addlaboritoristActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addlaboritoristActionPerformed
        // TODO add your handling code here:
        changePanel(laboritoristpanel);
    }//GEN-LAST:event_addlaboritoristActionPerformed

    private void addpharmacistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpharmacistActionPerformed
        // TODO add your handling code here:
        changePanel(pharmacistpanel);
    }//GEN-LAST:event_addpharmacistActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        changePanel(viewpanel);
    }//GEN-LAST:event_viewActionPerformed

    private void patient_signoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_signoutActionPerformed
        // TODO add your handling code here:
        changePanel(patientsignoutpanel);
    }//GEN-LAST:event_patient_signoutActionPerformed

    private void doc_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_addActionPerformed
        // TODO add your handling code here:
        try{
        String user = "root";
        String password = "";
        String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "insert into AddDoctor( First_Name, Last_Name, DateOfBirth,Address, Mobile, Email,"
                + "password, Retype_Password,Gender, Country,Department,Start_Date, End_Date, Specialization) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = con.prepareStatement(qry);
       // pst.setString(1,doc_id.getText());
//        if(doc_id.equals("")){
//        JOptionPane.showMessageDialog(null, "Doctor ID field must not be empty");
//       return;
//        }
        pst.setString(1,doc_firstname.getText());
        pst.setString(2,doc_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser1.getDateEditor().getUiComponent()).getText());
        pst.setString(4, doc_address.getText());
        pst.setString(5, doc_mobile.getText());
        pst.setString(6, doc_email.getText());
        pst.setString(7, doc_password.getText());
        pst.setString(8, doc_repassword.getText());
        pst.setString(9, Gender);
        String value = doc_country.getSelectedItem().toString();
        pst.setString(10, value);
        pst.setString(11, doc_department.getText());
        pst.setString(12, ((JTextField)jDateChooser8.getDateEditor().getUiComponent()).getText());
        pst.setString(13, ((JTextField)jDateChooser9.getDateEditor().getUiComponent()).getText());
        pst.setString(14,doc_specialization.getText());
       
//     if(doc_id.equals("")){
//        JOptionPane.showMessageDialog(null, "Doctor ID field must not be empty");
//        return;
//        }
        if(doc_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        return;
        }
        else if(doc_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        return;
        }
        else if(jDateChooser1.equals("")){
        JOptionPane.showMessageDialog(null, "Date field must not be empty");
        return;
        }
        else if(doc_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        return;
        }
        else if(doc_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        return;
        }
        else if(doc_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        return;
        }
        else if(doc_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "The password field must not be empty");
        return;
        }
        else if(doc_repassword.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must confirm password and the password must be the same");
        return;
        }
        else if(!doc_password.getText() .equals(doc_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password Mixmatch");
        }
        else if(Gender.equals("")){
        JOptionPane.showMessageDialog(null, "You must choose one");
        return;
        }
        else if(value.equals("Select Country")){
        JOptionPane.showMessageDialog(null, "You must select a country");
        return;
        }
        else if(doc_department.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Department field must not be empty");
        return;
        }
        else if(jDateChooser8.equals("")){
        JOptionPane.showMessageDialog(null, "You must enter start date");
        return;
        }
        else if(jDateChooser9.equals("")){
        JOptionPane.showMessageDialog(null, "YOu must enter end date");
        return;
        }
        else if(doc_specialization.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Specialization field must not be empty");
        return;
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Added Successfully");
         doc_id.setText("");
        doc_firstname.setText("");
        doc_lastname.setText("");
        doc_address.setText("");
        doc_mobile.setText("");
        doc_email.setText("");
        doc_password.setText("");
        doc_repassword.setText("");
        doc_department.setText("");
        doc_specialization.setText("");
        jDateChooser1.setDate(null);
        jDateChooser8.setDate(null);
        jDateChooser9.setDate(null);
         doc_genderM.setSelected(false);
        doc_genderF.setSelected(false);
        doc_country.setSelectedIndex(0);
        }
       }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_doc_addActionPerformed

    private void doc_genderMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_genderMActionPerformed
        // TODO add your handling code here:
        Gender = "Male";
        
    }//GEN-LAST:event_doc_genderMActionPerformed

    private void doc_genderFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_genderFActionPerformed
        // TODO add your handling code here:
        Gender = "Female";
    }//GEN-LAST:event_doc_genderFActionPerformed

    private void doc_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_idKeyReleased
        // TODO add your handling code here:
        String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_id.getText());
        if(!match.matches()){
        id_error.setText("Incorrect format");
        }else{
        id_error.setText(null);
        }
     
    }//GEN-LAST:event_doc_idKeyReleased

    private void doc_firstnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_firstnameKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9 ]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_firstname.getText());
        if(!match.matches()){
        fnameerror.setText("Incorrect format!");
        }else{
        fnameerror.setText(null);
        }
    }//GEN-LAST:event_doc_firstnameKeyReleased

    private void doc_addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_addressKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_address.getText());
        if(!match.matches()){
        addresserror.setText("Incorrect format");
        }else{
        addresserror.setText(null);
        }
    }//GEN-LAST:event_doc_addressKeyReleased

    private void doc_mobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_mobileKeyReleased
        // TODO add your handling code here:
        String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_mobile.getText());
        if(!match.matches()){
        mobile_error.setText("Incorrect format");
        }else{
        mobile_error.setText(null);
        }
        
    }//GEN-LAST:event_doc_mobileKeyReleased

    private void doc_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_emailKeyReleased
        // TODO add your handling code here:
         String pattern = "[a-zA-Z0-9@.]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_email.getText());
        if(!match.matches()){
        email_error.setText("Incorrect format");
        }else{
        email_error.setText(null);
        }
        
    }//GEN-LAST:event_doc_emailKeyReleased

    private void doc_passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_passwordKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_password.getText());
        if(!match.matches()){
        pass_error.setText("Incorrect format");
        }else{
        pass_error.setText(null);
        }
    }//GEN-LAST:event_doc_passwordKeyReleased

    private void doc_repasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_repasswordKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_repassword.getText());
        if(!match.matches()){
        repass_error.setText("Incorrect format");
        }else{
        repass_error.setText(null);
        }
    }//GEN-LAST:event_doc_repasswordKeyReleased

    private void doc_departmentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_departmentKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9 ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_department.getText());
        if(!match.matches()){
        dept_error.setText("Incorrect format");
        }else{
        dept_error.setText(null);
        }
    }//GEN-LAST:event_doc_departmentKeyReleased

    private void doc_specializationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_specializationKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9 ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_specialization.getText());
        if(!match.matches()){
        special_error.setText("Incorrect format");
        }else{
        special_error.setText(null);
        }
    }//GEN-LAST:event_doc_specializationKeyReleased

    private void doc_lastnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doc_lastnameKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(doc_lastname.getText());
        if(!match.matches()){
        lnameerror.setText("Incorrect format");
        }else{
        lnameerror.setText(null);
        }
    }//GEN-LAST:event_doc_lastnameKeyReleased

    private void doc_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_updateActionPerformed
        // TODO add your handling code here:
        try{
         String user = "root";
        String password = "";
        String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String dr_id = doc_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "update AddDoctor set First_Name = ?,Last_Name =?, DateOfBirth = ?, Address = ?, Mobile = ?, Email = ?, Password = ?, Retype_Password = ?, Gender = ?, Country = ?, Department =?, Start_Date = ?, End_Date = ?, Specialization = ? where Doctor_ID = "+dr_id;
        PreparedStatement pst = con.prepareStatement(query);
        //pst.setString(1, doc_id.getText());
        pst.setString(1, doc_firstname.getText());
        pst.setString(2, doc_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser1.getDateEditor().getUiComponent()).getText());
        pst.setString(4, doc_address.getText());
        pst.setString(5, doc_mobile.getText());
        pst.setString(6, doc_email.getText());
        pst.setString(7, doc_password.getText());
        pst.setString(8, doc_repassword.getText());
        pst.setString(9, Gender);
        String value = doc_country.getSelectedItem().toString();
        pst.setString(10, value);
        pst.setString(11, doc_department.getText());
        pst.setString(12, ((JTextField)jDateChooser8.getDateEditor().getUiComponent()).getText());
        pst.setString(13, ((JTextField)jDateChooser9.getDateEditor().getUiComponent()).getText());
        pst.setString(14, doc_specialization.getText());
        if(doc_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        return;
        }
        else if(doc_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, " Last name field must not be empty");
        return;
        }
        else if(doc_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        return;
        }
        else if(doc_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        return;
        }
        else if(doc_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        return;
        }
        else if(doc_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Password field must not be empty");
        return;
        }
        else if(doc_repassword.getText().trim().equals("") && doc_repassword != doc_password){
        JOptionPane.showMessageDialog(null, "You must comfirm password and password must be the same");
        return;
        }
         else if(!doc_password.getText() .equals(doc_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password Mixmatch");
        }
        else if(doc_department.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Department field must not be empty");
        return;
        }
        else if(doc_specialization.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Specialization field must not be empty");
        return;
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully Updated");
         doc_firstname.setText("");
        doc_lastname.setText("");
        doc_address.setText("");
        doc_mobile.setText("");
        doc_email.setText("");
        doc_password.setText("");
        doc_repassword.setText("");
        doc_department.setText("");
        doc_specialization.setText("");
        jDateChooser1.setDate(null);
        jDateChooser8.setDate(null);
        jDateChooser9.setDate(null);
        doc_genderM.setSelected(false);
        doc_genderF.setSelected(false);
        doc_country.setSelectedIndex(0);
        }
        
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_doc_updateActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try{
          String user = "root";
        String password = "";
        String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String d_id = doc_id.getText();
        String qry = "Select Doctor_ID, First_Name, Last_Name, DateOfBirth, Address, Mobile, Email, Password, Retype_Password, Department, Start_Date, End_Date, Specialization from AddDoctor where Doctor_ID = "+d_id;
        PreparedStatement pst = con.prepareStatement(qry);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
        doc_id.setText(rs.getString("Doctor_ID"));
        doc_firstname.setText(rs.getString("First_Name"));
        doc_lastname.setText(rs.getString("Last_Name"));
         jDateChooser1.setDate(rs.getDate("DateOfBirth"));
         doc_address.setText(rs.getString("Address"));
         doc_mobile.setText(rs.getString("Mobile"));
         doc_email.setText(rs.getString("Email"));
         doc_password.setText(rs.getString("Password"));
         doc_repassword.setText(rs.getString("Retype_Password"));
        doc_department.setText(rs.getString("Department"));
        jDateChooser8.setDate(rs.getDate("Start_Date"));
        jDateChooser9.setDate(rs.getDate("End_date"));
        doc_specialization.setText(rs.getString("Specialization"));        
        }
        }
        catch(Exception ex){
            System.out.println("ERROR OCCURED");
            System.out.println("Error" + ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void doc_idMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doc_idMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_doc_idMouseClicked

    private void doc_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_resetActionPerformed
        // TODO add your handling code here:
        doc_id.setText("");
        doc_firstname.setText("");
        doc_lastname.setText("");
        doc_address.setText("");
        doc_mobile.setText("");
        doc_email.setText("");
        doc_password.setText("");
        doc_repassword.setText("");
        doc_department.setText("");
        doc_specialization.setText("");
        jDateChooser1.setDate(null);
        jDateChooser8.setDate(null);
        jDateChooser9.setDate(null);
         doc_genderM.setSelected(false);
        doc_genderF.setSelected(false);
        doc_country.setSelectedIndex(0);
    }//GEN-LAST:event_doc_resetActionPerformed

    private void patient_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patient_idKeyReleased
        // TODO add your handling code here:
               String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patient_id.getText());
        if(!match.matches()){
        p_iderror.setText("Incorrect format");
        }else{
        p_iderror.setText(null);
        } 
    }//GEN-LAST:event_patient_idKeyReleased

    private void patient_fullnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patient_fullnameKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9 ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patient_fullname.getText());
        if(!match.matches()){
        fullname_error.setText("Incorrect format");
        }else{
        fullname_error.setText(null);
        } 
        
    }//GEN-LAST:event_patient_fullnameKeyReleased

    private void patient_addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patient_addressKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9, ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patient_address.getText());
        if(!match.matches()){
        p_addresserror.setText("Incorrect format");
        }else{
        p_addresserror.setText(null);
        } 
    }//GEN-LAST:event_patient_addressKeyReleased

    private void patient_admittedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patient_admittedKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9, ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patient_admitted.getText());
        if(!match.matches()){
        p_roomerror.setText("Incorrect format");
        }else{
        p_roomerror.setText(null);
        } 
    }//GEN-LAST:event_patient_admittedKeyReleased

    private void patient_mobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patient_mobileKeyReleased
        // TODO add your handling code here:
         String pattern = "[0-9, ]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patient_mobile.getText());
        if(!match.matches()){
        p_mobileerror.setText("Incorrect format");
        }else{
        p_mobileerror.setText(null);
        } 
    }//GEN-LAST:event_patient_mobileKeyReleased

    private void patient_diseaseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patient_diseaseKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patient_disease.getText());
        if(!match.matches()){
        disease_error.setText("Incorrect format");
        }else{
        disease_error.setText(null);
        } 
    }//GEN-LAST:event_patient_diseaseKeyReleased

    private void patientdoc_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientdoc_idKeyReleased
        // TODO add your handling code here:
            String pattern = "[0-9]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patientdoc_id.getText());
        if(!match.matches()){
        docid_error.setText("Incorrect format");
        }else{
        docid_error.setText(null);
        } 
    }//GEN-LAST:event_patientdoc_idKeyReleased

    private void patientdoc_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientdoc_nameKeyReleased
        // TODO add your handling code here:
         String pattern = "[a-zA-Z0-9]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(patientdoc_name.getText());
        if(!match.matches()){
        p_docnameerror.setText("Incorrect format");
        }else{
        p_docnameerror.setText(null);
        } 
    }//GEN-LAST:event_patientdoc_nameKeyReleased

    private void patient_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_addActionPerformed
        // TODO add your handling code here:
        try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "insert into AddPatient ( Full_Name, DateOfBirth, Address, Bed_Number, Mobile, Disease, Doctor_ID, Doctor_Name) values(?,?,?,?,?,?,?,?)";
          PreparedStatement pst = con.prepareStatement(qry);
        //pst.setString(1, patient_id.getText());
        pst.setString(1, patient_fullname.getText());
        pst.setString(2, ((JTextField)dateofbirth.getDateEditor().getUiComponent()).getText());
        pst.setString(3, patient_address.getText());
        pst.setString(4, patient_admitted.getText());
        pst.setString(5, patient_mobile.getText());
        pst.setString(6, patient_disease.getText());
        pst.setString(7, patientdoc_id.getText());
        pst.setString(8, patientdoc_name.getText());
//        if(patient_id.getText().trim().equals("")){
//        JOptionPane.showMessageDialog(null, "Patient ID field must not be empty");
//        }
        if(patient_fullname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Patient name must not be empty");
        }
        else if(dateofbirth.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "Date of birth field must not be empty");
        }
        else if(patient_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else if(patient_admitted.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Patient Room number must not be empty");
        }
        else if(patient_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        }
        else if(patient_disease.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Disease field must not be empty");
        }
        else if(patientdoc_id.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Doctor ID field must not be empty");
        }
        else if(patientdoc_name.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Doctor name field must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully Added");
        patient_id.setText("");
        patient_fullname.setText("");
        dateofbirth.setDate(null);
        patient_address.setText("");
        patient_admitted.setText("");
        patient_mobile.setText("");
        patient_disease.setText("");
        patientdoc_id.setText("");
        patientdoc_name.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_patient_addActionPerformed

    private void patient_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_updateActionPerformed
        // TODO add your handling code here:
        try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String paid = patient_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "update AddPatient set Full_Name=?, DateOfBirth=?, Address=?, Bed_Number=?, Mobile=?, Disease=?, Doctor_ID=?, Doctor_Name=? where Patient_ID ="+paid;
        PreparedStatement pst = con.prepareStatement(qry);
       // pst.setString(1, patient_id.getText());
        pst.setString(1, patient_fullname.getText());
        pst.setString(2, ((JTextField)dateofbirth.getDateEditor().getUiComponent()).getText());
        pst.setString(3, patient_address.getText());
        pst.setString(4, patient_admitted.getText());
        pst.setString(5, patient_mobile.getText());
        pst.setString(6, patient_disease.getText());
        pst.setString(7, patientdoc_id.getText());
        pst.setString(8, patientdoc_name.getText());
        if(patient_fullname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Full name field must not be empty");
        }
        else if(dateofbirth.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "Date of birth field must not be empty");
        }
        else if(patient_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else if(patient_admitted.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Rooms number field must not be empty");
        }
        else if(patient_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        }
        else if(patient_disease.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Patient disease field must not be empty");
        }
        else if(patientdoc_id.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Doctor ID must not be empty");
        }
        else if(patientdoc_name.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Doctor name must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully updated");
        patient_id.setText("");
        patient_fullname.setText("");
        dateofbirth.setDate(null);
        patient_address.setText("");
       patient_admitted.setText("");
       patient_mobile.setText("");
       patient_disease.setText("");
       patientdoc_id.setText("");
       patientdoc_name.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_patient_updateActionPerformed

    private void patient_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_resetActionPerformed
        // TODO add your handling code here:
          patient_id.setText("");
        patient_fullname.setText("");
        dateofbirth.setDate(null);
        patient_address.setText("");
       patient_admitted.setText("");
       patient_mobile.setText("");
       patient_disease.setText("");
       patientdoc_id.setText("");
       patientdoc_name.setText("");
    }//GEN-LAST:event_patient_resetActionPerformed

    private void patient_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patient_deleteActionPerformed
        // TODO add your handling code here:
        try{
         String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String pat = patient_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "delete from AddPatient where Patient_ID ="+pat;
        PreparedStatement pst = con.prepareStatement(query);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully deleted");
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_patient_deleteActionPerformed

    private void recept_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_idKeyReleased
        // TODO add your handling code here:
             String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_id.getText());
        if(!match.matches()){
        recep_iderror.setText("Incorrect format");
        }else{
        recep_iderror.setText(null);
        } 
    }//GEN-LAST:event_recept_idKeyReleased

    private void recept_firstnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_firstnameKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_firstname.getText());
        if(!match.matches()){
        recep_fnameerror.setText("Incorrect format");
        }else{
        recep_fnameerror.setText(null);
        } 
    }//GEN-LAST:event_recept_firstnameKeyReleased

    private void recept_lastnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_lastnameKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_lastname.getText());
        if(!match.matches()){
        recep_lnameerror.setText("Incorrect format");
        }else{
        recep_lnameerror.setText(null);
        } 
    }//GEN-LAST:event_recept_lastnameKeyReleased

    private void recept_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_emailKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9@.]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_email.getText());
        if(!match.matches()){
        recep_emailerror.setText("Incorrect format");
        }else{
        recep_emailerror.setText(null);
        } 
    }//GEN-LAST:event_recept_emailKeyReleased

    private void recept_mobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_mobileKeyReleased
        // TODO add your handling code here:
             String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_mobile.getText());
        if(!match.matches()){
        recep_mobileerror.setText("Incorrect format");
        }else{
        recep_mobileerror.setText(null);
        } 
    }//GEN-LAST:event_recept_mobileKeyReleased

    private void recept_addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_addressKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9, ]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_address.getText());
        if(!match.matches()){
        recep_addresserror.setText("Incorrect format");
        }else{
        recep_addresserror.setText(null);
        } 
    }//GEN-LAST:event_recept_addressKeyReleased

    private void recept_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_addActionPerformed
        // TODO add your handling code here:
        try{
        String user = "root";
        String password = "";
           String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "insert into AddReceptionist (First_Name, Last_Name, DateOfBirth, Country,Gender, Email_Address, Password, Retype_Password,Mobile, Home_Address)values(?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = con.prepareStatement(query);
        //pst.setString(1, recept_id.getText());
        pst.setString(1, recept_firstname.getText());
        pst.setString(2, recept_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser3.getDateEditor().getUiComponent()).getText());
        String value = recept_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, recept_email.getText());
        pst.setString(7, recept_password.getText());
        pst.setString(8, recept_repassword.getText());
        pst.setString(9, recept_mobile.getText());
        pst.setString(10, recept_address.getText());
        if(recept_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(recept_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser3.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "Date of birth field must not be empty");
        }
        else if(value.equals("Select Country")){
        JOptionPane.showMessageDialog(null, "You must select a country");
        }
        else if(recept_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(recept_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Password field must not be empty");
        }
        else if(recept_repassword.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must confirm password and the password must be the same");
        }
         else if(!recept_password.getText() .equals(recept_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(recept_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        }
        else if(recept_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully Added");
        recept_id.setText("");
        recept_firstname.setText("");
        recept_lastname.setText("");
        jDateChooser3.setDate(null);
        recept_country.setSelectedIndex(0);
        recept_email.setText("");
        recept_password.setText("");
        recept_repassword.setText("");
        recept_mobile.setText("");
        recept_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_recept_addActionPerformed

    private void recept_countryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_countryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recept_countryActionPerformed

    private void recept_genderMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_genderMActionPerformed
        // TODO add your handling code here:
        Gender = "Male";
    }//GEN-LAST:event_recept_genderMActionPerformed

    private void recept_genderFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_genderFActionPerformed
        // TODO add your handling code here:
        Gender = "Female";
    }//GEN-LAST:event_recept_genderFActionPerformed

    private void recept_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_resetActionPerformed
        // TODO add your handling code here:
         recept_id.setText("");
        recept_firstname.setText("");
        recept_lastname.setText("");
        jDateChooser3.setDate(null);
        recept_country.setSelectedIndex(0);
        recept_email.setText("");
        recept_password.setText("");
        recept_repassword.setText("");
        recept_mobile.setText("");
        recept_address.setText("");
    }//GEN-LAST:event_recept_resetActionPerformed

    private void account_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_idKeyReleased
        // TODO add your handling code here:
               String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(account_id.getText());
        if(!match.matches()){
        account_iderror.setText("Incorrect format");
        }else{
        account_iderror.setText(null);
        } 
    }//GEN-LAST:event_account_idKeyReleased

    private void account_firstnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_firstnameKeyReleased
        // TODO add your handling code here:
               String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(account_firstname.getText());
        if(!match.matches()){
        account_fnameerror.setText("Incorrect format");
        }else{
        account_fnameerror.setText(null);
        } 
    }//GEN-LAST:event_account_firstnameKeyReleased

    private void account_lastnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_lastnameKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(account_lastname.getText());
        if(!match.matches()){
        account_lnameerror.setText("Incorrect format");
        }else{
        account_lnameerror.setText(null);
        } 
    }//GEN-LAST:event_account_lastnameKeyReleased

    private void account_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_emailKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9@.]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(account_email.getText());
        if(!match.matches()){
        account_emailerror.setText("Incorrect format");
        }else{
        account_emailerror.setText(null);
        } 
    }//GEN-LAST:event_account_emailKeyReleased

    private void account_mobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_mobileKeyReleased
        // TODO add your handling code here:
             String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(account_mobile.getText());
        if(!match.matches()){
        account_mobileerror.setText("Incorrect format");
        }else{
        account_mobileerror.setText(null);
        } 
    }//GEN-LAST:event_account_mobileKeyReleased

    private void account_addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_account_addressKeyReleased
        // TODO add your handling code here:
             String pattern = "[a-zA-Z0-9 ,]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(account_address.getText());
        if(!match.matches()){
        account_addresserror.setText("Incorrect format");
        }else{
        account_addresserror.setText(null);
        } 
    }//GEN-LAST:event_account_addressKeyReleased

    private void account_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_addActionPerformed
        // TODO add your handling code here:
        try{
           String user = "root";
           String password = "";
           String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "insert into AddAccountant(First_Name, Last_Name, DateOfBirth, Country, Gender, Email_Address, Password, Retype_Password, Mobile, Home_Address)values(?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = con.prepareStatement(qry);
        //pst.setString(1, account_id.getText());
        pst.setString(1, account_firstname.getText());
        pst.setString(2, account_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser4.getDateEditor().getUiComponent()).getText());
        String value = account_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, account_email.getText());
        pst.setString(7, account_password1.getText());
        pst.setString(8, account_repassword1.getText());
        pst.setString(9, account_mobile.getText());
        pst.setString(10, account_address.getText());
        if(account_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(account_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser4.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must select a date of birth");
        }
        else if(value.equals(null)){
        JOptionPane.showMessageDialog(null, "You must select a country");
        }
        else if(account_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(account_password1.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Password field must not be empty");
        }
        else if(account_repassword1.getText().trim().equals("")){
        }
         else if(!account_password1.getText() .equals(account_repassword1.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(account_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        }
        else if(account_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully Added");
        account_id.setText("");
        account_firstname.setText("");
        account_lastname.setText("");
        jDateChooser3.setDate(null);
        account_country.setSelectedIndex(0);
        account_email.setText("");
        account_password1.setText("");
        account_repassword1.setText("");
        account_mobile.setText("");
        account_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_account_addActionPerformed

    private void recept_passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_passwordKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_password.getText());
        if(!match.matches()){
            recep_passerror.setText("Incorrect format");
        }else{
            recep_passerror.setText(null);
        }
    }//GEN-LAST:event_recept_passwordKeyReleased

    private void recept_repasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recept_repasswordKeyReleased
        // TODO add your handling code here:
        String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(recept_repassword.getText());
        if(!match.matches()){
            recep_repasserror.setText("Incorrect format");
        }else{
            recep_repasserror.setText(null);
        }
    }//GEN-LAST:event_recept_repasswordKeyReleased

    private void doc_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doc_deleteActionPerformed
        try{
         String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String did = doc_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "delete from AddDoctor where Doctor_ID = "+did;
        PreparedStatement pst = con.prepareStatement(query);
        //pst.setInt(1, 9);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully deleted");
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_doc_deleteActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try{
          String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String pid = patient_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "select * from AddPatient where Patient_ID ="+pid;
        PreparedStatement pst = con.prepareStatement(qry);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
         patient_id.setText(rs.getString("Patient_ID"));
        patient_fullname.setText(rs.getString("Full_Name"));
        dateofbirth.setDate(rs.getDate("DateOfBirth"));
        patient_address.setText(rs.getString("Address"));
        patient_admitted.setText(rs.getString("Bed_Number"));
        patient_mobile.setText(rs.getString("Mobile"));
        patient_disease.setText(rs.getString("Disease"));
        patientdoc_id.setText(rs.getString("Doctor_ID"));
        patientdoc_name.setText(rs.getString("Doctor_Name"));
        }
        }
        catch(Exception ex){
        JOptionPane.showMessageDialog(null, "ERROR OCCURED");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void recept_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_updateActionPerformed
        // TODO add your handling code here:
        try{
         String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String reupdate = recept_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "update AddReceptionist set First_Name=?, Last_Name=?, DateOfBirth=?,Country=?, Gender=?,Email_Address=?, Password=?, Retype_Password=?, Mobile=?, Home_Address=? where ID ="+reupdate;
        PreparedStatement pst = con.prepareStatement(query);
        //pst.setString(1, recept_id.getText());
        pst.setString(1, recept_firstname.getText());
        pst.setString(2, recept_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser3.getDateEditor().getUiComponent()).getText());
        String value = recept_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, recept_email.getText());
        pst.setString(7, recept_password.getText());
        pst.setString(8, recept_repassword.getText());
        pst.setString(9, recept_mobile.getText());
        pst.setString(10, recept_address.getText());
        if(recept_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(recept_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser3.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter Date of birth");
        }
        else if(recept_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(recept_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a password");
        }
        else if(recept_repassword.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must confirm password and the password must be the same");
        }
         else if(!recept_password.getText() .equals(recept_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(recept_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a phone number");
        }
        else if(recept_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully updated");
        recept_id.setText("");
        recept_firstname.setText("");
        recept_lastname.setText("");
         jDateChooser3.setDate(null);
        recept_country.setSelectedIndex(0);
        recept_email.setText("");
        recept_password.setText("");
        recept_repassword.setText("");
        recept_mobile.setText("");
        recept_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_recept_updateActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String reget = recept_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "select * from AddReceptionist where ID ="+reget;
           PreparedStatement pst = con.prepareStatement(qry);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
         recept_id.setText(rs.getString("ID"));
        recept_firstname.setText(rs.getString("First_Name"));
        recept_lastname.setText(rs.getString("Last_Name"));
        jDateChooser3.setDate(rs.getDate("DateOfBirth"));
        recept_email.setText(rs.getString("Email_Address"));
        recept_password.setText(rs.getString("Password"));
        recept_repassword.setText(rs.getString("Retype_Password"));
        recept_mobile.setText(rs.getString("Mobile"));
        recept_address.setText(rs.getString("Home_Address"));
        }
        }
        catch(Exception ex){
        JOptionPane.showMessageDialog(null, "ERROR OCCURED");
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void recept_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recept_deleteActionPerformed
        // TODO add your handling code here:
        try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String delete = recept_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "delete from AddReceptionist where ID = "+delete;
        PreparedStatement pst = con.prepareStatement(query);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully deleted");
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_recept_deleteActionPerformed

    private void account_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_updateActionPerformed
        // TODO add your handling code here:
        try{
          String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String updateaccount = account_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "update AddAccountant set First_Name =?, Last_Name = ?, DateOfBirth =?, Country = ?, Gender =?, Email_Address =?, Password =?, Retype_Password =?, Mobile = ?, Home_Address =? where ID ="+updateaccount;
        PreparedStatement pst = con.prepareStatement(qry);
         pst.setString(1, account_firstname.getText());
        pst.setString(2, account_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser4.getDateEditor().getUiComponent()).getText());
        String value = account_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, account_email.getText());
        pst.setString(7, account_password1.getText());
        pst.setString(8, account_repassword1.getText());
        pst.setString(9, account_mobile.getText());
        pst.setString(10, account_address.getText());
           if(account_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(account_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser4.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter Date of birth");
        }
        else if(account_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(account_password1.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a password");
        }
        else if(account_repassword1.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must confirm password and the password must be the same");
        }
        else if(!account_password1.getText() .equals(account_repassword1.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(account_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a phone number");
        }
        else if(account_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
         JOptionPane.showMessageDialog(null, "Successfully updated");
        account_id.setText("");
        account_firstname.setText("");
        account_lastname.setText("");
         jDateChooser4.setDate(null);
        account_country.setSelectedIndex(0);
        account_email.setText("");
        account_password1.setText("");
        account_repassword1.setText("");
        account_mobile.setText("");
        account_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_account_updateActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        try{
         String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String getaccount = account_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "select * from AddAccountant where ID ="+getaccount;
        PreparedStatement pst = con.prepareStatement(qry);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
        account_id.setText(rs.getString("ID"));
        account_firstname.setText(rs.getString("First_Name"));
        account_lastname.setText(rs.getString("Last_Name"));
         jDateChooser4.setDate(rs.getDate("DateOfBirth"));
         account_email.setText(rs.getString("Email_Address"));
         account_password1.setText(rs.getString("Password"));
         account_repassword1.setText(rs.getString("Retype_Password"));
         account_mobile.setText(rs.getString("Mobile"));
         account_address.setText(rs.getString("Home_Address"));
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void account_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_deleteActionPerformed
        // TODO add your handling code here:
            try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String deleteaccount = account_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "delete from AddAccountant where ID = "+deleteaccount;
        PreparedStatement pst = con.prepareStatement(query);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully deleted");
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_account_deleteActionPerformed

    private void account_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_resetActionPerformed
        // TODO add your handling code here:
         account_id.setText("");
        account_firstname.setText("");
        account_lastname.setText("");
        jDateChooser4.setDate(null);
        account_country.setSelectedIndex(0);
        account_email.setText("");
        account_password1.setText("");
        account_repassword1.setText("");
        account_mobile.setText("");
        account_address.setText("");
    }//GEN-LAST:event_account_resetActionPerformed

    private void lab_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_idKeyReleased
        // TODO add your handling code here:
          String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_id.getText());
        if(!match.matches()){
            labid_error.setText("Incorrect format");
        }else{
            labid_error.setText(null);
        }
    }//GEN-LAST:event_lab_idKeyReleased

    private void lab_firstnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_firstnameKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_firstname.getText());
        if(!match.matches()){
            labname_error.setText("Incorrect format");
        }else{
            labname_error.setText(null);
        }
    }//GEN-LAST:event_lab_firstnameKeyReleased

    private void lab_lastnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_lastnameKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_lastname.getText());
        if(!match.matches()){
            labname1_error.setText("Incorrect format");
        }else{
            labname1_error.setText(null);
        }
    }//GEN-LAST:event_lab_lastnameKeyReleased

    private void lab_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_emailKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9@.]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_email.getText());
        if(!match.matches()){
            labemail_error.setText("Incorrect format");
        }else{
            labemail_error.setText(null);
        }
    }//GEN-LAST:event_lab_emailKeyReleased

    private void lab_passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_passwordKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_password.getText());
        if(!match.matches()){
            labpass_error.setText("Incorrect format");
        }else{
            labpass_error.setText(null);
        }
    }//GEN-LAST:event_lab_passwordKeyReleased

    private void lab_repasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_repasswordKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_repassword.getText());
        if(!match.matches()){
            labrepass_error.setText("Incorrect format");
        }else{
            labrepass_error.setText(null);
        }
    }//GEN-LAST:event_lab_repasswordKeyReleased

    private void lab_mobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_mobileKeyReleased
        // TODO add your handling code here:
          String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_mobile.getText());
        if(!match.matches()){
            labmobile_error.setText("Incorrect format");
        }else{
            labmobile_error.setText(null);
        }
    }//GEN-LAST:event_lab_mobileKeyReleased

    private void lab_addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_addressKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(lab_address.getText());
        if(!match.matches()){
            labaddress_error.setText("Incorrect format");
        }else{
            labaddress_error.setText(null);
        }
    }//GEN-LAST:event_lab_addressKeyReleased

    private void account_genderMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_genderMActionPerformed
        // TODO add your handling code here:
        Gender = "Male";
    }//GEN-LAST:event_account_genderMActionPerformed

    private void account_genderFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_genderFActionPerformed
        // TODO add your handling code here:
        Gender = "Female";
    }//GEN-LAST:event_account_genderFActionPerformed

    private void lab_genderMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_genderMActionPerformed
        // TODO add your handling code here:
        Gender = "Male";
    }//GEN-LAST:event_lab_genderMActionPerformed

    private void lab_genderFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_genderFActionPerformed
        // TODO add your handling code here:
        Gender = "Female";
    }//GEN-LAST:event_lab_genderFActionPerformed

    private void lab_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_addActionPerformed
        // TODO add your handling code here:
         try{
           String user = "root";
           String password = "";
           String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "insert into AddLaboratorist(First_Name, Last_Name, DateOfBirth, Country, Gender, Email_Address, Password, Retype_Password, Mobile, Home_Address)values(?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = con.prepareStatement(qry);
        //pst.setString(1, lab_id.getText());
        pst.setString(1, lab_firstname.getText());
        pst.setString(2, lab_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser5.getDateEditor().getUiComponent()).getText());
        String value = lab_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, lab_email.getText());
        pst.setString(7, lab_password.getText());
        pst.setString(8, lab_repassword.getText());
        pst.setString(9, lab_mobile.getText());
        pst.setString(10, lab_address.getText());
        if(lab_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(lab_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser5.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must select a date of birth");
        }
        else if(value.equals(null)){
        JOptionPane.showMessageDialog(null, "You must select a country");
        }
        else if(lab_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(lab_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Password field must not be empty");
        }
        else if(lab_repassword.getText().trim().equals("")){
        }
            else if(!lab_password.getText() .equals(lab_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(lab_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        }
        else if(lab_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully Added");
        lab_id.setText("");
        lab_firstname.setText("");
        lab_lastname.setText("");
        jDateChooser5.setDate(null);
        lab_country.setSelectedIndex(0);
        lab_email.setText("");
        lab_password.setText("");
        lab_repassword.setText("");
        lab_mobile.setText("");
        lab_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_lab_addActionPerformed

    private void lab_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_updateActionPerformed
        // TODO add your handling code here:
          try{
          String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String updatelab = lab_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "update AddLaboratorist set First_Name =?, Last_Name = ?, DateOfBirth =?, Country = ?, Gender =?, Email_Address =?, Password =?, Retype_Password =?, Mobile = ?, Home_Address =? where ID ="+updatelab;
        PreparedStatement pst = con.prepareStatement(qry);
         pst.setString(1, lab_firstname.getText());
        pst.setString(2, lab_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser5.getDateEditor().getUiComponent()).getText());
        String value = lab_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, lab_email.getText());
        pst.setString(7, lab_password.getText());
        pst.setString(8, lab_repassword.getText());
        pst.setString(9, lab_mobile.getText());
        pst.setString(10, lab_address.getText());
           if(lab_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(lab_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser5.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter Date of birth");
        }
        else if(lab_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(lab_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a password");
        }
        else if(lab_repassword.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must confirm password and the password must be the same");
        }
        else if(!lab_password.getText() .equals(lab_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(lab_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a phone number");
        }
        else if(lab_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
         JOptionPane.showMessageDialog(null, "Successfully updated");
        lab_id.setText("");
        lab_firstname.setText("");
        lab_lastname.setText("");
         jDateChooser5.setDate(null);
        lab_country.setSelectedIndex(0);
        lab_email.setText("");
        lab_password.setText("");
        lab_repassword.setText("");
        lab_mobile.setText("");
        lab_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_lab_updateActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
         try{
         String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String getlab = lab_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "select * from AddLaboratorist where ID ="+getlab;
        PreparedStatement pst = con.prepareStatement(qry);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
        lab_id.setText(rs.getString("ID"));
        lab_firstname.setText(rs.getString("First_Name"));
        lab_lastname.setText(rs.getString("Last_Name"));
         jDateChooser5.setDate(rs.getDate("DateOfBirth"));
         lab_email.setText(rs.getString("Email_Address"));
         lab_password.setText(rs.getString("Password"));
         lab_repassword.setText(rs.getString("Retype_Password"));
         lab_mobile.setText(rs.getString("Mobile"));
         lab_address.setText(rs.getString("Home_Address"));
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void lab_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_deleteActionPerformed
        // TODO add your handling code here:
                try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String deletelab = lab_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "delete from AddLaboratorist where ID = "+deletelab;
        PreparedStatement pst = con.prepareStatement(query);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully deleted");
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_lab_deleteActionPerformed

    private void lab_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lab_resetActionPerformed
        // TODO add your handling code here:
        lab_id.setText("");
        lab_firstname.setText("");
        lab_lastname.setText("");
        jDateChooser5.setDate(null);
        lab_country.setSelectedIndex(0);
        lab_email.setText("");
        lab_password.setText("");
        lab_repassword.setText("");
        lab_mobile.setText("");
        lab_address.setText("");
    }//GEN-LAST:event_lab_resetActionPerformed

    private void pha_genderMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_genderMActionPerformed
        // TODO add your handling code here:
        Gender = "Male";
    }//GEN-LAST:event_pha_genderMActionPerformed

    private void pha_genderFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_genderFActionPerformed
        // TODO add your handling code here:
        Gender = "Female";
    }//GEN-LAST:event_pha_genderFActionPerformed

    private void pha_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_idKeyReleased
        // TODO add your handling code here:
        String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_id.getText());
        if(!match.matches()){
            phaid_error.setText("Incorrect format");
        }else{
            phaid_error.setText(null);
        }
    }//GEN-LAST:event_pha_idKeyReleased

    private void pha_firstnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_firstnameKeyReleased
        // TODO add your handling code here:
         String pattern = "[a-zA-Z0-9 ,]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_firstname.getText());
        if(!match.matches()){
            phafname_error.setText("Incorrect format");
        }else{
            phafname_error.setText(null);
        }
    }//GEN-LAST:event_pha_firstnameKeyReleased

    private void pha_lastnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_lastnameKeyReleased
        // TODO add your handling code here:
          String pattern = "[a-zA-Z0-9 ,]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_lastname.getText());
        if(!match.matches()){
            phalname_error.setText("Incorrect format");
        }else{
            phalname_error.setText(null);
        }
    }//GEN-LAST:event_pha_lastnameKeyReleased

    private void pha_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_emailKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9@.]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_email.getText());
        if(!match.matches()){
            phaemail_error.setText("Incorrect format");
        }else{
            phaemail_error.setText(null);
        }
    }//GEN-LAST:event_pha_emailKeyReleased

    private void pha_passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_passwordKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_password.getText());
        if(!match.matches()){
            phapassword_error.setText("Incorrect format");
        }else{
            phapassword_error.setText(null);
        }
    }//GEN-LAST:event_pha_passwordKeyReleased

    private void pharepass_errorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pharepass_errorKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_pharepass_errorKeyReleased

    private void pha_repasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_repasswordKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_repassword.getText());
        if(!match.matches()){
            pharepass_error.setText("Incorrect format");
        }else{
            pharepass_error.setText(null);
        }
    }//GEN-LAST:event_pha_repasswordKeyReleased

    private void pha_mobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_mobileKeyReleased
        // TODO add your handling code here:
           String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_mobile.getText());
        if(!match.matches()){
            phamobile_error.setText("Incorrect format");
        }else{
            phamobile_error.setText(null);
        }
    }//GEN-LAST:event_pha_mobileKeyReleased

    private void pha_addressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pha_addressKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(pha_address.getText());
        if(!match.matches()){
            phaaddress_error.setText("Incorrect format");
        }else{
            phaaddress_error.setText(null);
        }
    }//GEN-LAST:event_pha_addressKeyReleased

    private void pha_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_addActionPerformed
        // TODO add your handling code here:
         try{
           String user = "root";
           String password = "";
           String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "insert into AddPharmacist(First_Name, Last_Name, DateOfBirth, Country, Gender, Email_Address, Password, Retype_Password, Mobile, Home_Address)values(?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = con.prepareStatement(qry);
        //pst.setString(1, pha_id.getText());
        pst.setString(1, pha_firstname.getText());
        pst.setString(2, pha_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser6.getDateEditor().getUiComponent()).getText());
        String value = pha_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, pha_email.getText());
        pst.setString(7, pha_password.getText());
        pst.setString(8, pha_repassword.getText());
        pst.setString(9, pha_mobile.getText());
        pst.setString(10, pha_address.getText());
        if(pha_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(pha_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser6.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must select a date of birth");
        }
        else if(value.equals(null)){
        JOptionPane.showMessageDialog(null, "You must select a country");
        }
        else if(pha_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(pha_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Password field must not be empty");
        }
        else if(pha_repassword.getText().trim().equals("")){
        }
              else if(!pha_password.getText() .equals(pha_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(pha_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Mobile field must not be empty");
        }
        else if(pha_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully Added");
        pha_id.setText("");
        pha_firstname.setText("");
        pha_lastname.setText("");
        jDateChooser6.setDate(null);
        pha_country.setSelectedIndex(0);
        pha_email.setText("");
        pha_password.setText("");
        pha_repassword.setText("");
        pha_mobile.setText("");
        pha_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_pha_addActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
         try{
         String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String getpha = pha_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "select * from AddPharmacist where ID ="+getpha;
        PreparedStatement pst = con.prepareStatement(qry);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
        pha_id.setText(rs.getString("ID"));
        pha_firstname.setText(rs.getString("First_Name"));
        pha_lastname.setText(rs.getString("Last_Name"));
         jDateChooser6.setDate(rs.getDate("DateOfBirth"));
         pha_email.setText(rs.getString("Email_Address"));
         pha_password.setText(rs.getString("Password"));
         pha_repassword.setText(rs.getString("Retype_Password"));
         pha_mobile.setText(rs.getString("Mobile"));
         pha_address.setText(rs.getString("Home_Address"));
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void pha_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_updateActionPerformed
        // TODO add your handling code here:
         try{
          String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String updatepha = pha_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String qry = "update AddPharmacist set First_Name =?, Last_Name = ?, DateOfBirth =?, Country = ?, Gender =?, Email_Address =?, Password =?, Retype_Password =?, Mobile = ?, Home_Address =? where ID ="+updatepha;
        PreparedStatement pst = con.prepareStatement(qry);
         pst.setString(1, pha_firstname.getText());
        pst.setString(2, pha_lastname.getText());
        pst.setString(3, ((JTextField)jDateChooser6.getDateEditor().getUiComponent()).getText());
        String value = pha_country.getSelectedItem().toString();
        pst.setString(4, value);
        pst.setString(5, Gender);
        pst.setString(6, pha_email.getText());
        pst.setString(7, pha_password.getText());
        pst.setString(8, pha_repassword.getText());
        pst.setString(9, pha_mobile.getText());
        pst.setString(10, pha_address.getText());
           if(pha_firstname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "First name field must not be empty");
        }
        else if(pha_lastname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Last name field must not be empty");
        }
        else if(jDateChooser6.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter Date of birth");
        }
        else if(pha_email.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Email field must not be empty");
        }
        else if(pha_password.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a password");
        }
        else if(pha_repassword.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must confirm password and the password must be the same");
        }
        else if(!pha_password.getText() .equals(pha_repassword.getText())){
        JOptionPane.showMessageDialog(null, "Password must be the same");
        }
        else if(pha_mobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter a phone number");
        }
        else if(pha_address.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else{
        pst.executeUpdate();
         JOptionPane.showMessageDialog(null, "Successfully updated");
        pha_id.setText("");
        pha_firstname.setText("");
        pha_lastname.setText("");
         jDateChooser6.setDate(null);
        pha_country.setSelectedIndex(0);
        pha_email.setText("");
        pha_password.setText("");
        pha_repassword.setText("");
        pha_mobile.setText("");
        pha_address.setText("");
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_pha_updateActionPerformed

    private void pha_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_deleteActionPerformed
        // TODO add your handling code here:
           try{
        String user = "root";
        String password = "";
         String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        String deletepha = pha_id.getText();
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "delete from AddPharmacist where ID = "+deletepha;
        PreparedStatement pst = con.prepareStatement(query);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully deleted");
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_pha_deleteActionPerformed

    private void pha_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pha_resetActionPerformed
        // TODO add your handling code here:
        pha_id.setText("");
        pha_firstname.setText("");
        pha_lastname.setText("");
        jDateChooser6.setDate(null);
        pha_country.setSelectedIndex(0);
        pha_email.setText("");
        pha_password.setText("");
        pha_repassword.setText("");
        pha_mobile.setText("");
        pha_address.setText("");
        pha_genderM.setSelected(false);
        pha_genderF.setSelected(false);
    }//GEN-LAST:event_pha_resetActionPerformed

    private void outpatient_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatient_idKeyReleased
        // TODO add your handling code here:
           String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatient_id.getText());
        if(!match.matches()){
            outid_error.setText("Incorrect format");
        }else{
            outid_error.setText(null);
        }
    }//GEN-LAST:event_outpatient_idKeyReleased

    private void outpatientfullnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientfullnameKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientfullname.getText());
        if(!match.matches()){
          outfullname.setText("Incorrect format");
        }else{
            outfullname.setText(null);
        }
    }//GEN-LAST:event_outpatientfullnameKeyReleased

    private void outpatientaddressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientaddressKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientaddress.getText());
        if(!match.matches()){
            outaddress.setText("Incorrect format");
        }else{
            outaddress.setText(null);
        }
    }//GEN-LAST:event_outpatientaddressKeyReleased

    private void outpatientroomKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientroomKeyReleased
        // TODO add your handling code here:
           String pattern = "[0-9]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientroom.getText());
        if(!match.matches()){
            outroom.setText("Incorrect format");
        }else{
            outroom.setText(null);
        }
    }//GEN-LAST:event_outpatientroomKeyReleased

    private void outpatientmobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientmobileKeyReleased
        // TODO add your handling code here:
           String pattern = "[0-9]{0,30}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientmobile.getText());
        if(!match.matches()){
        outmobile.setText("Incorrect format");
        }else{
        outmobile.setText(null);
        }
    }//GEN-LAST:event_outpatientmobileKeyReleased

    private void outpatientdiseaseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientdiseaseKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientdisease.getText());
        if(!match.matches()){
            outdisease.setText("Incorrect format");
        }else{
            outdisease.setText(null);
        }
    }//GEN-LAST:event_outpatientdiseaseKeyReleased

    private void outpatientdocidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientdocidKeyReleased
        // TODO add your handling code here:
           String pattern = "[0-9]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientdocid.getText());
        if(!match.matches()){
            outdocid.setText("Incorrect format");
        }else{
          outdocid.setText(null);
        }
    }//GEN-LAST:event_outpatientdocidKeyReleased

    private void outpatientdocnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientdocnameKeyReleased
        // TODO add your handling code here:
           String pattern = "[a-zA-Z0-9 ,]{0,50}$";
        Pattern patt = Pattern.compile(pattern);
        Matcher match = patt.matcher(outpatientdocname.getText());
        if(!match.matches()){
            outdocname.setText("Incorrect format");
        }else{
         outdocname.setText(null);
        }
    }//GEN-LAST:event_outpatientdocnameKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
          String user = "root";
           String password = "";
           String url = "jdbc:mysql://localhost:3306/javaDatabase";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(url, user, password);
        String query = "insert into OutPatient (Patient_ID, Full_Name,DateOfBirth,Address, Room_Number, Mobile, Disease,Doctor_ID, Doctor_Name,Date_Admitted, Leave_Date)values(?,?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = con.prepareStatement(query);
        pst.setString(1, outpatient_id.getText());
        pst.setString(2, outpatientfullname.getText());
        pst.setString(3, ((JTextField)jDateChooser7.getDateEditor().getUiComponent()).getText());
        pst.setString(4, outpatientaddress.getText());
        pst.setString(5, outpatientroom.getText());
        pst.setString(6, outpatientmobile.getText());
        pst.setString(7, outpatientdisease.getText());
        pst.setString(8, outpatientdocid.getText());
        pst.setString(9, outpatientdocname.getText());
        pst.setString(10, ((JTextField)outpatientdate1.getDateEditor().getUiComponent()).getText());
        pst.setString(11, ((JTextField)outpatientdate2.getDateEditor().getUiComponent()).getText());
        if(outpatient_id.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Patient ID must not be empty");
        }
         if(outpatientfullname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Patient name must not be empty");
        }
        else if(jDateChooser7.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter patient date of birth");
        }
        else if(outpatientaddress.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Address field must not be empty");
        }
        else if(outpatientroom.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Patient room number must not be empty");
        }
        else if(outpatientmobile.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter patient phone number");
        }
        else if(outpatientdisease.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Disease field must not be empty");
        }
        else if(outpatientdocid.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "Doctor ID field must not be empty");
        }
        else if(outpatientdocname.getText().trim().equals("")){
        JOptionPane.showMessageDialog(null, "You must enter the doctor name");
        }
        else if(outpatientdate1.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter admitted date");
        }
        else if(outpatientdate2.getDate().equals(null)){
        JOptionPane.showMessageDialog(null, "You must enter end date");
        }
        else{
        String deletepa = outpatient_id.getText();
        String qry = "delete from AddPatient where Patient_ID ="+deletepa;
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Successfully signed out");
        outpatient_id.setText("");
        outpatientfullname.setText("");
        jDateChooser7.setDate(null);
        outpatientaddress.setText("");
        outpatientroom.setText("");
        outpatientmobile.setText("");
        outpatientdisease.setText("");
        outpatientdocid.setText("");
        outpatientdocname.setText("");
        outpatientdate1.setDate(null);
        outpatientdate2.setDate(null);
        }
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        outpatient_id.setText("");
        outpatientfullname.setText("");
        jDateChooser7.setDate(null);
        outpatientaddress.setText("");
        outpatientroom.setText("");
        outpatientmobile.setText("");
        outpatientdisease.setText("");
        outpatientdocid.setText("");
        outpatientdocname.setText("");
        outpatientdate1.setDate(null);
        outpatientdate2.setDate(null);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void viewdoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewdoctorsActionPerformed
        // TODO add your handling code here:
        ViewDoctor vd = new ViewDoctor();
        this.dispose();
    }//GEN-LAST:event_viewdoctorsActionPerformed

    private void viewpatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewpatientsActionPerformed
        // TODO add your handling code here:
        ViewPatient vp = new ViewPatient();
        this.dispose();
    }//GEN-LAST:event_viewpatientsActionPerformed

    private void viewreceptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewreceptsActionPerformed
        // TODO add your handling code here:
        ViewReceptionist vr = new ViewReceptionist();
        this.dispose();
        
    }//GEN-LAST:event_viewreceptsActionPerformed

    private void viewaccountantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewaccountantsActionPerformed
        // TODO add your handling code here:
        ViewAccountant va = new ViewAccountant();
        this.dispose();
    }//GEN-LAST:event_viewaccountantsActionPerformed

    private void viewlabsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewlabsActionPerformed
        // TODO add your handling code here:
        ViewLaboritorist vl = new ViewLaboritorist();
        this.dispose();
    }//GEN-LAST:event_viewlabsActionPerformed

    private void viewpharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewpharActionPerformed
        // TODO add your handling code here:
        ViewPharmacist vp = new ViewPharmacist();
        this.dispose();
    }//GEN-LAST:event_viewpharActionPerformed

    private void dailyincomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailyincomeActionPerformed
        // TODO add your handling code here:
        CashIncome ci = new CashIncome();
        this.dispose();
        
    }//GEN-LAST:event_dailyincomeActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        VisaCard vc = new VisaCard();
        this.dispose();
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        MasterCard ms = new MasterCard();
        this.dispose();
        
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        VerveCard vc = new VerveCard();
        this.dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Attendance at = new Attendance();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        OutPatient op = new OutPatient();
        this.dispose();
    }//GEN-LAST:event_jButton14ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashBoard().setVisible(true);
            }
        });
    }
    public void changePanel(JPanel panel)
    {
    layeredPane.removeAll();
   layeredPane.add(panel);
   layeredPane.repaint();
   layeredPane.revalidate();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Doc_title;
    private javax.swing.JButton account_add;
    private javax.swing.JTextField account_address;
    private javax.swing.JLabel account_addresserror;
    private javax.swing.JComboBox<String> account_country;
    private javax.swing.JButton account_delete;
    private javax.swing.JTextField account_email;
    private javax.swing.JLabel account_emailerror;
    private javax.swing.JTextField account_firstname;
    private javax.swing.JLabel account_fnameerror;
    private javax.swing.JRadioButton account_genderF;
    private javax.swing.JRadioButton account_genderM;
    private javax.swing.JTextField account_id;
    private javax.swing.JLabel account_iderror;
    private javax.swing.JTextField account_lastname;
    private javax.swing.JLabel account_lnameerror;
    private javax.swing.JTextField account_mobile;
    private javax.swing.JLabel account_mobileerror;
    private javax.swing.JLabel account_passerror;
    private javax.swing.JPasswordField account_password1;
    private javax.swing.JLabel account_repasserror;
    private javax.swing.JPasswordField account_repassword1;
    private javax.swing.JButton account_reset;
    private javax.swing.JLabel account_title;
    private javax.swing.JButton account_update;
    private javax.swing.JPanel accountantpanel;
    private javax.swing.JButton addaccountant;
    private javax.swing.JButton adddoctor;
    private javax.swing.JButton addlaboritorist;
    private javax.swing.JButton addpatient;
    private javax.swing.JButton addpharmacist;
    private javax.swing.JButton addreceptionist;
    private javax.swing.JLabel addresserror;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton dailyincome;
    private com.toedter.calendar.JDateChooser dateofbirth;
    private javax.swing.JLabel dept_error;
    private javax.swing.JLabel disease_error;
    private javax.swing.JButton doc_add;
    private javax.swing.JTextField doc_address;
    private javax.swing.JComboBox<String> doc_country;
    private javax.swing.JButton doc_delete;
    private javax.swing.JTextField doc_department;
    private javax.swing.JTextField doc_email;
    private javax.swing.JTextField doc_firstname;
    private javax.swing.JRadioButton doc_genderF;
    private javax.swing.JRadioButton doc_genderM;
    private javax.swing.JTextField doc_id;
    private javax.swing.JTextField doc_lastname;
    private javax.swing.JTextField doc_mobile;
    private javax.swing.JPasswordField doc_password;
    private javax.swing.JPasswordField doc_repassword;
    private javax.swing.JButton doc_reset;
    private javax.swing.JTextField doc_specialization;
    private javax.swing.JButton doc_update;
    private javax.swing.JLabel docid_error;
    private javax.swing.JPanel doctorpanel;
    private javax.swing.JLabel email_error;
    private javax.swing.JLabel fnameerror;
    private javax.swing.JLabel fullname_error;
    private javax.swing.JButton home;
    private javax.swing.JLabel homeimage;
    private javax.swing.JPanel homepanel;
    private javax.swing.JLabel id_error;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private com.toedter.calendar.JDateChooser jDateChooser4;
    private com.toedter.calendar.JDateChooser jDateChooser5;
    private com.toedter.calendar.JDateChooser jDateChooser6;
    private com.toedter.calendar.JDateChooser jDateChooser7;
    private com.toedter.calendar.JDateChooser jDateChooser8;
    private com.toedter.calendar.JDateChooser jDateChooser9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JButton lab_add;
    private javax.swing.JTextField lab_address;
    private javax.swing.JComboBox<String> lab_country;
    private javax.swing.JButton lab_delete;
    private javax.swing.JTextField lab_email;
    private javax.swing.JTextField lab_firstname;
    private javax.swing.JRadioButton lab_genderF;
    private javax.swing.JRadioButton lab_genderM;
    private javax.swing.JTextField lab_id;
    private javax.swing.JTextField lab_lastname;
    private javax.swing.JTextField lab_mobile;
    private javax.swing.JPasswordField lab_password;
    private javax.swing.JPasswordField lab_repassword;
    private javax.swing.JButton lab_reset;
    private javax.swing.JLabel lab_title;
    private javax.swing.JButton lab_update;
    private javax.swing.JLabel labaddress_error;
    private javax.swing.JLabel labemail_error;
    private javax.swing.JLabel labid_error;
    private javax.swing.JLabel labmobile_error;
    private javax.swing.JLabel labname1_error;
    private javax.swing.JLabel labname_error;
    private javax.swing.JPanel laboritoristpanel;
    private javax.swing.JLabel labpass_error;
    private javax.swing.JLabel labrepass_error;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JLabel lnameerror;
    private javax.swing.JLabel mobile_error;
    private javax.swing.JLabel outaddress;
    private javax.swing.JLabel outdisease;
    private javax.swing.JLabel outdocid;
    private javax.swing.JLabel outdocname;
    private javax.swing.JLabel outfullname;
    private javax.swing.JLabel outid_error;
    private javax.swing.JLabel outmobile;
    private javax.swing.JTextField outpatient_id;
    private javax.swing.JTextField outpatientaddress;
    private com.toedter.calendar.JDateChooser outpatientdate1;
    private com.toedter.calendar.JDateChooser outpatientdate2;
    private javax.swing.JTextField outpatientdisease;
    private javax.swing.JTextField outpatientdocid;
    private javax.swing.JTextField outpatientdocname;
    private javax.swing.JTextField outpatientfullname;
    private javax.swing.JTextField outpatientmobile;
    private javax.swing.JTextField outpatientroom;
    private javax.swing.JLabel outroom;
    private javax.swing.JLabel p_addresserror;
    private javax.swing.JLabel p_docnameerror;
    private javax.swing.JLabel p_iderror;
    private javax.swing.JLabel p_mobileerror;
    private javax.swing.JLabel p_roomerror;
    private javax.swing.JLabel pass_error;
    private javax.swing.JButton patient_add;
    private javax.swing.JTextField patient_address;
    private javax.swing.JTextField patient_admitted;
    private javax.swing.JButton patient_delete;
    private javax.swing.JTextField patient_disease;
    private javax.swing.JTextField patient_fullname;
    private javax.swing.JTextField patient_id;
    private javax.swing.JTextField patient_mobile;
    private javax.swing.JButton patient_reset;
    private javax.swing.JButton patient_signout;
    private javax.swing.JLabel patient_title;
    private javax.swing.JButton patient_update;
    private javax.swing.JTextField patientdoc_id;
    private javax.swing.JTextField patientdoc_name;
    private javax.swing.JPanel patientpanel;
    private javax.swing.JLabel patientroom;
    private javax.swing.JPanel patientsignoutpanel;
    private javax.swing.JButton pha_add;
    private javax.swing.JTextField pha_address;
    private javax.swing.JComboBox<String> pha_country;
    private javax.swing.JButton pha_delete;
    private javax.swing.JTextField pha_email;
    private javax.swing.JTextField pha_firstname;
    private javax.swing.JRadioButton pha_genderF;
    private javax.swing.JRadioButton pha_genderM;
    private javax.swing.JTextField pha_id;
    private javax.swing.JTextField pha_lastname;
    private javax.swing.JTextField pha_mobile;
    private javax.swing.JPasswordField pha_password;
    private javax.swing.JPasswordField pha_repassword;
    private javax.swing.JButton pha_reset;
    private javax.swing.JLabel pha_title;
    private javax.swing.JButton pha_update;
    private javax.swing.JLabel phaaddress_error;
    private javax.swing.JLabel phaemail_error;
    private javax.swing.JLabel phafname_error;
    private javax.swing.JLabel phaid_error;
    private javax.swing.JLabel phalname_error;
    private javax.swing.JLabel phamobile_error;
    private javax.swing.JLabel phapassword_error;
    private javax.swing.JLabel pharepass_error;
    private javax.swing.JPanel pharmacistpanel;
    private javax.swing.JLabel recep_addresserror;
    private javax.swing.JLabel recep_emailerror;
    private javax.swing.JLabel recep_fnameerror;
    private javax.swing.JLabel recep_iderror;
    private javax.swing.JLabel recep_lnameerror;
    private javax.swing.JLabel recep_mobileerror;
    private javax.swing.JLabel recep_passerror;
    private javax.swing.JLabel recep_repasserror;
    private javax.swing.JButton recept_add;
    private javax.swing.JTextField recept_address;
    private javax.swing.JComboBox<String> recept_country;
    private javax.swing.JButton recept_delete;
    private javax.swing.JTextField recept_email;
    private javax.swing.JTextField recept_firstname;
    private javax.swing.JRadioButton recept_genderF;
    private javax.swing.JRadioButton recept_genderM;
    private javax.swing.JTextField recept_id;
    private javax.swing.JTextField recept_lastname;
    private javax.swing.JTextField recept_mobile;
    private javax.swing.JPasswordField recept_password;
    private javax.swing.JPasswordField recept_repassword;
    private javax.swing.JButton recept_reset;
    private javax.swing.JLabel recept_title;
    private javax.swing.JButton recept_update;
    private javax.swing.JPanel receptionistpanel;
    private javax.swing.JLabel repass_error;
    private javax.swing.JLabel special_error;
    private javax.swing.JButton view;
    private javax.swing.JButton viewaccountants;
    private javax.swing.JButton viewdoctors;
    private javax.swing.JButton viewlabs;
    private javax.swing.JPanel viewpanel;
    private javax.swing.JButton viewpatients;
    private javax.swing.JButton viewphar;
    private javax.swing.JButton viewrecepts;
    // End of variables declaration//GEN-END:variables

private String Gender;
}
